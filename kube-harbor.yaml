# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: <<<<< Install and configure Harbor container registry >>>>>
  hosts: kubernetes_control_planes[0]
  become_user: "{{ _kube.user }}"

  vars:
    values_file: "{{ _work_dir }}/harbor-values.yaml"

  tasks:
    - name: Get ingress service information
      kubernetes.core.k8s_info:
        kind: Service
        namespace: ingress-nginx
        name: ingress-nginx-controller
      register: ingress_service

    - name: Add harbor portal DNS entries to /etc/hosts
      become_user: root
      vars:
        address: "{% if _kube.install.metallb is defined and _kube.install.metallb %}{{ ingress_service.resources[0].status.loadBalancer.ingress.0.ip }}{% else %}{{ _kube.cluster.address }}{% endif %}"
      lineinfile:
        path: /etc/hosts
        insertafter: "127.0.0.1 localhost"
        line: "{{ address }} core.{{ _harbor.domain }} notary.{{ _harbor.domain }}"
      delegate_to: "{{ item }}"
      loop: "{{ groups['kubernetes_cluster'] }}"

    - name: Get ingress class
      kubernetes.core.k8s_info:
        kind: IngressClass
      register: ingress_class

    - name: Create harbor chart values file
      become_user: root
      vars:
        ingress_name: "{{ ingress_class.resources[0].metadata.name }}"
      blockinfile:
        create: yes
        path: "{{ values_file }}"
        block: |
          fullnameOverride: harbor
          logLevel: warning
          expose:
            type: ingress
            tls:
              enabled: true
              certSource: auto

            ingress:
              hosts:
                core: core.{{ _harbor.domain }}
                notary: notary.{{ _harbor.domain }}
              controller: default
              className: "{{ ingress_name }}"
              annotations:
                ingress.kubernetes.io/ssl-redirect: "true"
                ingress.kubernetes.io/proxy-body-size: "0"
                nginx.ingress.kubernetes.io/ssl-redirect: "true"
                nginx.ingress.kubernetes.io/proxy-body-size: "0"

          externalURL: https://core.{{ _harbor.domain }}

          persistence:
            enabled: true

      delegate_to: localhost

    - name: Install harbor
      block:
        - name: Add harbor chart repo
          kubernetes.core.helm_repository:
            name: harbor
            repo_url: "https://helm.goharbor.io"

        - name: Deploy harbor
          vars:
            version: "{% if _pkg.harbor is defined and _pkg.harbor and _pkg.harbor != 'latest' %}{{ _pkg.harbor }}{% endif %}"
          kubernetes.core.helm:
            name: harbor
            atomic: yes
            chart_ref: harbor/harbor
            chart_version: "{{ version }}"
            namespace: harbor-system
            create_namespace: yes
            values: "{{ lookup('file', values_file) | from_yaml }}"
            wait: yes

        - name: Waiting for harbor deployments to be ready
          shell: |
             for d in $(kubectl -n harbor-system get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n harbor-system deployment/$d; done;

        - name: Waiting for Harbor api to be up
          uri:
            url: "https://core.{{ _harbor.domain }}/api/v2.0/systeminfo/getcert"
            validate_certs: no
          register: result
          until: result.status == 200
          retries: 15
          delay: 30

    - name: Get harbor registry certificate
      become_user: root
      block:
        - name: Get harbor registry certificate
          get_url:
            url: https://core.{{ _harbor.domain }}/api/v2.0/systeminfo/getcert
            dest: "{{ _work_dir }}/harbor-ca.crt"
            mode: '0644'
            force: true
            validate_certs: no

      delegate_to: localhost

- name: Configure kubernetes nodes to trust registry certificate
  hosts: kubernetes_cluster

  vars:
    cert_dir: "/usr/local/share/ca-certificates"
    cr_cert_dir: "/etc/containerd/certs.d/core.{{ _harbor.domain }}"

  tasks:
    - name: Create a directory if it does not exist
      file:
        path: "{{ cr_cert_dir }}"
        state: directory
        mode: '0755'

    - name: Copy registry certificate to containerd certificate directory
      copy:
        src: "{{ _work_dir }}/harbor-ca.crt"
        dest: "{{ cr_cert_dir }}/harbor-ca.crt"
        mode: 0777

    - name: Copy registry certificate to shared certificate directory
      copy:
        src: "{{ _work_dir }}/harbor-ca.crt"
        dest: "{{ cert_dir }}/harbor-ca.crt"
        mode: 0777

    - name: Update certificates
      shell: update-ca-certificates

- hosts: localhost
  become: yes
  become_user: root

  tasks:
    - name: Cleanup files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ _work_dir }}/harbor-values.yaml"
        - "{{ _work_dir }}/harbor-ca.crt"

