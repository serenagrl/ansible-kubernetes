# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: <<<<< Install and configure istio >>>>>
  hosts: kubernetes_control_planes[0]
  become_user: "{{ _kube.user }}"
  
  vars:
    scrape_config: "prometheus-additional.yaml"
    secret_config: "additional-scrape-configs.yaml"

  tasks:
    - name: Get latest istio release
      shell: |
              curl -s https://api.github.com/repos/istio/istio/releases/latest | grep tag_name | cut -d '"' -f 4
      register: release_tag
      when: _pkg.istio is undefined or not _pkg.istio or _pkg.istio == "latest"

    - name: Install and configure istioctl
      vars:
        release: "{% if _pkg.istio is defined and _pkg.istio and _pkg.istio != 'latest' %}{{ _pkg.istio }}{% else %}{{ release_tag.stdout }}{% endif %}"
        istio_dir: "{{ _work_dir }}/istio-{{ release }}"
        addons_dir: "{{ istio_dir }}/samples/addons"
      block:
        - name: Install istioctl
          become_user: root
          shell: | 
                  curl -L https://istio.io/downloadIstio | ISTIO_VERSION={{ release }} sh -
          args:
            chdir: "{{ _work_dir }}"

          delegate_to: localhost

        - name: Copy istioctl from Ansible host to the control plane
          become_user: root
          copy:
            src: "{{ istio_dir }}/bin/istioctl"
            dest: "{{ _istio.istioctl_dir }}"
            mode: 0777

        - name: Installing istio
          shell: |
                  istioctl install --set profile={{ _istio.profile }} -y --set components.egressGateways[0].name=istio-egressgateway --set components.egressGateways[0].enabled=true	
                  kubectl rollout status -n istio-system deployment/istiod

        - name: Patch istio ingress gateway to use NodePort
          kubernetes.core.k8s:
            state: patched
            namespace: istio-system
            kind: Service
            name: istio-ingressgateway
            definition: |
              spec:
                type: NodePort
                ports:
                - nodePort: {{ _istio.addons.nodeports.gateway.http }}
                  port: 80
                - nodePort: {{ _istio.addons.nodeports.gateway.https }}
                  port: 443
          when: _kube.use_nodeport                  

        - name: Labeling namespaces for istio injection (if any)
          kubernetes.core.k8s:
            state: patched
            kind: Namespace
            name: "{{ item }}"
            definition: |
              metadata:
                labels:
                  istio-injection: enabled
          loop: "{{ _istio.inject if _istio.inject is iterable else [] }}"

        - name: Configure integration with Prometheus
          block:
            - name: Export existing additional scrape configs to file
              shell: |
                kubectl -n monitoring get secret additional-scrape-configs -o jsonpath="{['data']['prometheus-additional\.yaml']}" | base64 --decode > {{ scrape_config }}
              args:
                chdir: $HOME  

            - name: Add istio scrape configs to scrape configs file
              blockinfile:
                path: "~/{{ scrape_config }}"
                marker: ""
                block: |
                  - job_name: 'istiod'
                    kubernetes_sd_configs:
                    - role: endpoints
                      namespaces:
                        names:
                        - istio-system
                    
                    relabel_configs:
                    - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                      action: keep
                      regex: istiod;http-monitoring

                  - job_name: 'envoy-stats'
                    metrics_path: /stats/prometheus
                    kubernetes_sd_configs:
                    - role: pod

                    relabel_configs:
                    - source_labels: [__meta_kubernetes_pod_container_port_name]
                      action: keep
                      regex: '.*-envoy-prom'

            - name: Create secret for additional Prometheus scrape configs
              shell: |
                kubectl create secret generic additional-scrape-configs --from-file={{ scrape_config }} --dry-run=client -o yaml > {{ secret_config }}
              args:
                chdir: $HOME  

            - name: Apply additional scrape configs
              kubernetes.core.k8s:
                namespace: monitoring
                src: "~/{{ secret_config }}"

            - name: Patch prometheus to include additional scrape configs
              kubernetes.core.k8s:
                state: patched
                namespace: monitoring
                name: k8s
                kind: Prometheus
                definition: |
                  spec:
                    additionalScrapeConfigs:
                      name: additional-scrape-configs
                      key: prometheus-additional.yaml

            - name: Patch Prometheus ClusterRole
              shell: |
                kubectl -n monitoring patch clusterrole prometheus-k8s --type='json' -p='[{"op": "add", "path": "/rules/0", "value":{ "apiGroups": [""], "resources": ["nodes","services","endpoints","nodes/proxy","pods"], "verbs": ["get","list","watch"]}}]'
                kubectl -n monitoring patch clusterrole prometheus-k8s --type='json' -p='[{"op": "add", "path": "/rules/0", "value":{ "apiGroups": [""], "resources": ["configmaps"], "verbs": ["get"]}}]'

          when: _kube.install.monitoring

        - name: Install Jaeger and Kiali
          block:
            - name: Configure Prometheus and Grafana
              blockinfile:
                path: "{{ addons_dir }}/kiali.yaml"
                insertafter: "root_namespace: istio-system"
                marker: "      # ANSIBLE MANAGED BLOCK"
                block: |2
                        prometheus:
                          url: "http://prometheus-k8s.monitoring.svc:9090/prometheus"
                        grafana:
                          enabled: true
                          in_cluster_url: 'http://grafana.monitoring.svc:3000/'
                          url: 'http://serena.k8s.local/grafana'
              delegate_to: localhost
                                
            - name: Install istio addons
              kubernetes.core.k8s:
                definition: "{{ lookup('file', '{{ item }}') | from_yaml_all }}"
              with_fileglob:
                - "{{ addons_dir }}/jaeger.yaml"
                - "{{ addons_dir }}/kiali.yaml"

            - name: Waiting for kiali deployment to complete
              shell: kubectl rollout status -n istio-system deployment/kiali

            - name: Patch kiali service to use NodePort {{ _istio.addons.nodeports.kiali }}
              kubernetes.core.k8s:
                state: patched
                namespace: istio-system
                kind: Service
                name: kiali
                definition: |
                  spec:
                    type: NodePort
                    ports:
                    - nodePort: {{ _istio.addons.nodeports.kiali }}
                      port: 20001
              when: _kube.use_nodeport

            - name: Check for ingress availability
              kubernetes.core.k8s_info:
                kind: IngressClass
              register: ingress_class

            - name: Create ingress for kiali 
              vars:
                ingress_name: "{{ ingress_class.resources[0].metadata.name }}"
              kubernetes.core.k8s:
                apply: yes
                force: yes
                definition: |
                  apiVersion: networking.k8s.io/v1
                  kind: Ingress
                  metadata:
                    name: kiali-ingress
                    namespace: istio-system
                  spec:
                    ingressClassName: {{ ingress_name }}
                    rules:
                      - host: {{ _ingress.host }}
                        http:
                          paths:
                            - path: /kiali
                              pathType: Prefix
                              backend:
                                service:
                                  name: kiali
                                  port:
                                    number: 20001

        - name: Cleanup
          block:
            - name: Cleanup config files
              file:
                path: "{{ item }}"
                state: absent
              loop:
                - "~/{{ scrape_config }}"
                - "~/{{ secret_config }}"
            
            - name: Cleanup 
              become_user: root
              file:
                path: "{{ istio_dir }}"
                state: absent
              delegate_to: localhost
          when: _istio.cleanup
