# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: Get control-plane join command
  delegate_to: "{{ groups['primary_control_plane'][0] }}"
  ansible.builtin.shell: echo $(kubeadm token create --print-join-command) --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs | grep -vw -e upload-certs)
  register: join_command
  run_once: yes

# Note: Need to make sure the nodes are joined 1-by-1 to prevent etcd timeout.
- name: Joining secondary control plane (may take a while)
  ansible.builtin.shell: |
    {{ join_command.stdout }}

- become_user: "{{ _kube.user }}"
  delegate_to: "{{ groups['primary_control_plane'][0] }}"
  name: Wait for calico to be ready
  ansible.builtin.shell: |
    for d in $(kubectl -n tigera-operator get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n tigera-operator deployment/$d; done;
    for d in $(kubectl -n calico-system get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n calico-system deployment/$d; done;
    for d in $(kubectl -n calico-system get daemonset -o json | jq -r .items[].metadata.name); do kubectl rollout status -n calico-system daemonset/$d; done;
    for d in $(kubectl -n calico-apiserver get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n calico-apiserver deployment/$d; done;
