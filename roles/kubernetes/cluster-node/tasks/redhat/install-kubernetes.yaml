# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: Configure firewall
  block:
    - name: Enable and start firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Configure Kubernetes API server port clearance
      ansible.posix.firewalld:
        port: 6443/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure etcd server client port clearance
      ansible.posix.firewalld:
        port: 2379-2380/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure API server health check port clearance
      ansible.posix.firewalld:
        port: 10248/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure Kubelet API port clearance
      ansible.posix.firewalld:
        port: 10250/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure Kube Controller Manager port clearance
      ansible.posix.firewalld:
        port: 10257/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure Kube Scheduler port clearance
      ansible.posix.firewalld:
        port: 10259/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure NodePort Services port clearance
      ansible.posix.firewalld:
        port: 30000-32767/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure HTTP port clearance
      ansible.posix.firewalld:
        port: 80/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure HTTPS port clearance
      ansible.posix.firewalld:
        port: 443/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure Calico BGP port clearance
      ansible.posix.firewalld:
        port: 179/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure Calico Typha port clearance
      ansible.posix.firewalld:
        port: 5473/tcp
        permanent: true
        immediate: true
        state: enabled

    - name: Configure Calico VXLAN port clearance
      ansible.posix.firewalld:
        port: 4789/udp
        permanent: true
        immediate: true
        state: enabled

    - name: Create Kubernetes Pod firewall zone
      ansible.posix.firewalld:
        zone: kubernetes_pods
        state: present
        permanent: true

    - name: Reload Firewall rules
      shell: sudo firewall-cmd --reload

    - name: Set Kubernetes Pod firewall zone target
      ansible.posix.firewalld:
        zone: kubernetes_pods
        state: present
        target: ACCEPT
        permanent: true

    - name: Add VXLAN interface to zone
      ansible.posix.firewalld:
        zone: kubernetes_pods
        interface: vxlan.calico
        permanent: true
        immediate: true
        state: enabled

    - name: Add Calico interface to zone
      ansible.posix.firewalld:
        zone: kubernetes_pods
        interface: cali+
        permanent: true
        immediate: true
        state: enabled

    - name: Reload Firewall rules
      shell: sudo firewall-cmd --reload

- name: Install kubernetes
  vars:
    has_version_specified: "{{ (kubernetes.version is defined and kubernetes.version and kubernetes.version != 'latest') | bool }}"
    release: "{{ has_version_specified | ternary('v' + kubernetes.version, release_tag.stdout) }}"
  block:

    - name: Configure SELinux
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    - name: Get latest kubernetes release
      ansible.builtin.shell: |
          curl -s "https://api.github.com/repos/kubernetes/kubernetes/releases/latest" | grep tag_name | cut -d '"' -f 4
      register: release_tag
      when: not has_version_specified

    - name: Add Kubernetes repository
      vars:
         repo_version: "{{ release.split('.')[:2]|join('.') }}"
      ansible.builtin.copy:
        dest: "/etc/yum.repos.d/kubernetes.repo"
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/{{ repo_version }}/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/{{ repo_version }}/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

    - name: Installing kubernetes ({{ release }})
      vars:
        dnf_release: "{% if kubernetes.version is defined and kubernetes.version and kubernetes.version != 'latest' %}-{{ kubernetes.version }}{% endif %}"
      ansible.builtin.dnf:
        name:
          - "kubelet{{ dnf_release }}"
          - "kubeadm{{ dnf_release }}"
          - "kubectl{{ dnf_release }}"
        state: latest
        disable_excludes: kubernetes
        update_cache: yes

    - name: Enable and start Kubelet service
      shell: |
        sudo systemctl enable kubelet
        sudo systemctl start kubelet
