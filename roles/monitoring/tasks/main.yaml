# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: Download and configure kube prometheus
  delegate_to: localhost
  become_user: root
  block:
    - import_tasks: ./tasks/task-git-clone.yaml
      vars:
        name: "kube prometheus"
        repo_path: "prometheus-operator/kube-prometheus"
        pkg_version: "{{ release_version | default }}"
        version_prefix: "v"
        url: "https://github.com/prometheus-operator/kube-prometheus.git"
        dest: "{{ REPO_DIR }}"

    - name: Fix malformed enum in 0alertmanagerConfigCustomResourceDefinition.yaml
      shell: |
              sed -i "s/- =$/- '='/g" 0alertmanagerConfigCustomResourceDefinition.yaml
      args:
        chdir: "{{ SETUP_DIR }}"

    - name: Scale down the pods for lesser than 3 kubernetes_nodes configuration
      vars:
        node_count: "{% if (groups['kubernetes_nodes'] | length) > 0 %}{{ groups['kubernetes_nodes'] | length }}{% else %}{{ groups['kubernetes_control_planes'] | length }}{% endif %}"
      shell: |
              sed -i 's/replicas: 2/replicas: 1/g' prometheus-prometheus.yaml
              sed -i 's/replicas: 2/replicas: 1/g' prometheusAdapter-deployment.yaml
              sed -i 's/replicas: 3/replicas: 1/g' alertmanager-alertmanager.yaml
      args:
        chdir: "{{ MANIFEST_DIR }}"
      when: node_count | int < 3

    - name: Configure to run on control-planes only
      replace:
        path: "{{ MANIFEST_DIR }}/{{ item }}"
        regexp: '^\s*(nodeSelector:)$'
        replace: |4-
                  tolerations:
                    - effect: NoSchedule
                      key: node-role.kubernetes.io/control-plane
                      operator: Exists
                  \1
                    node-role.kubernetes.io/control-plane: ""
      loop:
        - prometheusAdapter-deployment.yaml 
        - kubeStateMetrics-deployment.yaml
        - prometheusOperator-deployment.yaml 
        - grafana-deployment.yaml 
        - blackboxExporter-deployment.yaml 
      when: not _kube.allow_scheduling

    - name: Configure to run on control-planes only
      replace:
        path: "{{ MANIFEST_DIR }}/{{ item }}"
        regexp: '^\s*(nodeSelector:)$'
        replace: |8-
                  tolerations:
                    - effect: NoSchedule
                      key: node-role.kubernetes.io/control-plane
                      operator: Exists
                  \1
                    node-role.kubernetes.io/control-plane: ""
      loop:
        - prometheus-prometheus.yaml 
        - alertmanager-alertmanager.yaml 
      when: not _kube.allow_scheduling

- name: Install kube prometheus custom resources
  kubernetes.core.k8s:
    definition: "{{ lookup('file', '{{ item }}') | from_yaml_all }}"
  with_fileglob:
    - "{{ SETUP_DIR }}/*.yaml"

- name: Install kube prometheus
  kubernetes.core.k8s:
    apply: yes
    force: yes
    definition: "{{ lookup('file', '{{ item }}') | from_yaml_all }}"
  loop: "{{ q('fileglob', MANIFEST_DIR + '/*.yaml') | sort | difference(excludes)  }}"

- name: Configure NodePorts for kube prometheus services
  kubernetes.core.k8s:
    state: patched
    namespace: monitoring
    kind: Service
    name: "{{ item.name }}"
    definition: |
      spec:
        type: NodePort
        ports:
        - nodePort: {{ item.nodePort }}
          port: {{ item.port }}
  loop:
    - { name: grafana, nodePort: '{{ nodeports.grafana }}', port: 3000 }
    - { name: prometheus-k8s, nodePort: '{{ nodeports.prometheus }}', port: 9090 }
    - { name: alertmanager-main, nodePort: '{{ nodeports.alertmanager }}', port: 9093 }
  when: _kube.use_nodeport

# Notes: Use cluster's domain name and with custom route /prometheus, /grafana and /alerts
- name: Setup ingress
  include_tasks: "{{ INGRESS_SETUP }}"
  vars:
    name: monitoring
    namespace: monitoring
    definition: "{{ INGRESS_TEMPLATE }}"  

- name: Configure ingress
  block:
    - name: Edit prometheus configuration
      kubernetes.core.k8s:
        state: patched
        namespace: monitoring
        kind: Prometheus
        name: k8s
        definition: |
          spec:
            externalUrl: /prometheus
            routePrefix: /prometheus
            alerting:
              alertmanagers:
                - apiVersion: v2
                  name: alertmanager-main
                  namespace: monitoring
                  port: web
                  pathPrefix: /alerts

    - name: Edit alertmanager configuration
      kubernetes.core.k8s:
        state: patched
        namespace: monitoring
        kind: Alertmanager
        name: main
        definition: |
          spec:
            routePrefix: /alerts

    - name: Patch kube prometheus configurations to support ingress
      delegate_to: localhost
      become_user: root
      block:
        - name: Edit grafana configuration
          blockinfile:
            path: "{{ MANIFEST_DIR }}/grafana-config.yaml"
            insertafter: "default_timezone = UTC"
            marker: "    # ANSIBLE MANAGED BLOCK"
            block: |2
                  [server]
                  domain = {{ _kube.hostname }}
                  root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana/
                  serve_from_sub_path = true

        - name: Patch grafana datasource url
          replace:
            path: "{{ MANIFEST_DIR }}/grafana-dashboardDatasources.yaml"
            regexp: 'http://prometheus-k8s.monitoring.svc:9090'
            replace: 'http://prometheus-k8s.monitoring.svc:9090/prometheus'

    - name: Apply configuration changes
      kubernetes.core.k8s:
        apply: yes
        force: yes
        definition: "{{ lookup('file', '{{ item }}') | from_yaml_all }}"
      with_fileglob:
        - "{{ MANIFEST_DIR }}/grafana-config.yaml"
        - "{{ MANIFEST_DIR }}/grafana-dashboardDatasources.yaml"

    - name: Waiting for grafana to be ready
      shell: |
              kubectl rollout restart deployment grafana -n monitoring
              kubectl rollout status -n monitoring deployment/grafana

  when: (ingress_result.resources | length > 0)

- name: Cleanup directories
  delegate_to: localhost
  become_user: root
  file:
    path: "{{ REPO_DIR }}"
    state: absent
  when: cleanup
