# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- become_user: root
  delegate_to: localhost
  block:
    - ansible.builtin.include_tasks: ./tasks/task-get-manifest.yaml
      vars:
        name: "calico"
        repo_path: "projectcalico/calico"
        pkg_version: "{{ calico.version | default }}"
        version_prefix: "v"
        dest: "{{ _work_dir }}"
        manifest_url: "https://raw.githubusercontent.com/{{ repo_path }}/{{ release }}/manifests"
        urls:
          - "{{ manifest_url }}/{{ OPERATOR_MANIFEST }}"
          - "{{ manifest_url }}/{{ OPERATOR_CRD }}"

    - name: Set CIDR network
      ansible.builtin.replace:
        path: "{{ _work_dir }}/{{ OPERATOR_CRD }}"
        regexp: '192.168.0.0/16'
        replace: '{{ _kube.cluster.cidr_network }}'

- become_user: "{{ _kube.user }}"
  block:
    - name: Installing calico
      kubernetes.core.k8s:
        definition: "{{ lookup('file', item) | from_yaml_all }}"
        wait: yes
      loop:
        - "{{ OPERATOR_MANIFEST_FILE }}"
        - "{{ OPERATOR_CRD_FILE }}"

    - name: Waiting for calico to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=Ready nodes --all --timeout=600s
        for d in $(kubectl -n calico-system get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n calico-system deployment/$d; done;
        for d in $(kubectl -n calico-system get daemonset -o json | jq -r .items[].metadata.name); do kubectl rollout status -n calico-system daemonset/$d; done;
        for d in $(kubectl -n calico-apiserver get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n calico-apiserver deployment/$d; done;
        for d in $(kubectl -n kube-system get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n kube-system deployment/$d; done;

- name: Cleanup manifest files
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ OPERATOR_MANIFEST_FILE }}"
    - "{{ OPERATOR_CRD_FILE }}"
  when: _cleanup

- name: Install calico cli to ansible controller host
  delegate_to: localhost
  vars:
    has_version_specified: "{{ (calico.version is defined and calico.version and calico.version != 'latest') | bool }}"
    release: "{{ has_version_specified | ternary('v' + calico.version, release_tag.stdout) }}"
    repo_path: projectcalico/calico
  block:
    - name: Get latest calico release
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/{{ repo_path }}/releases/latest | grep tag_name | cut -d '"' -f 4
      register: release_tag
      when: not has_version_specified

    - name: Download calico cli
      become_user: root
      ansible.builtin.shell: |
        curl -sSL -o /usr/local/bin/calicoctl-linux-amd64 https://github.com/{{ repo_path }}/releases/download/{{ release }}/calicoctl-linux-amd64
        chmod +x /usr/local/bin/calicoctl-linux-amd64
    
    - name: Setup calico cli
      become_user: root
      ansible.builtin.shell: |
        cp /usr/local/bin/calicoctl-linux-amd64 /usr/local/bin/calicoctl
      when: calico.install_cli
    
    - name: Setup calico plugin
      become_user: root
      ansible.builtin.shell: |
        cp /usr/local/bin/calicoctl-linux-amd64 /usr/local/bin/kubectl-calico
      when: calico.install_kubectl_plugin

    - name: Cleanup file
      ansible.builtin.file:
        path: "/usr/local/bin/calicoctl-linux-amd64"
        state: absent
      when: _cleanup
  when: calico.install_cli or calico.install_kubectl_plugin