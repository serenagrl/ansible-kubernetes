# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#

# Sets the cluster_address fact
- import_tasks: ./tasks/task-get-cluster-address.yaml
  vars:
    ingress_type: "{{ _kube.ingress_type }}"

- name: Add argocd portal DNS entries to /etc/hosts
  become_user: root
  lineinfile:
    path: /etc/hosts
    insertafter: "127.0.0.1 localhost"
    line: "{{ cluster_address }} {{ domain }}"
  delegate_to: "{{ item }}"
  loop: "{{ groups[register_dns_to] }}"
  ignore_errors: yes
  ignore_unreachable: yes

- name: Create argocd namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: argocd

- become_user: root
  delegate_to: localhost
  block:
    - import_tasks: ./tasks/task-get-manifest.yaml
      vars:
        name: "argocd"
        namespace: "argocd"
        repo_path: "argoproj/argo-cd"
        pkg_version: "{{ release_version | default }}"
        version_prefix: "v"
        dest: "{{ MANIFEST_FILE }}"
        urls: ["https://raw.githubusercontent.com/{{ repo_path }}/{{ release }}/manifests/install.yaml"]

    - name: Configure to run on control-planes only
      ansible.builtin.replace:
        path: "{{ MANIFEST_FILE }}"
        regexp: '^\s*(containers:)$'
        replace: |4-
                  tolerations:
                    - effect: NoSchedule
                      key: node-role.kubernetes.io/control-plane
                      operator: Exists
                  nodeSelector:
                    node-role.kubernetes.io/control-plane: ""    
                  \1
      when: not _kube.allow_scheduling

- name: Install argocd
  kubernetes.core.k8s:
    apply: yes
    force: yes
    namespace: "argocd"
    definition: "{{ lookup('file', MANIFEST_FILE) | from_yaml_all }}"

- name: Cleanup manifest file
  delegate_to: localhost
  become_user: root
  file:
    path: "{{ MANIFEST_FILE }}"
    state: absent
  when: cleanup
  
- import_tasks: ./tasks/task-get-secret.yaml
  vars:
    name: "ArgoCD portal password"
    command: "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}'"
    filename: "argocd_password"

- name: Patch argocd server to NodePort {{ nodeport }}
  kubernetes.core.k8s:
    state: patched
    namespace: argocd
    kind: Service
    name: argocd-server
    definition: |
      spec:
        type: NodePort
        ports:
        - nodePort: {{ nodeport }}
          port: 443
  when: _kube.use_nodeport

- name: Install ingress ({{ _kube.ingress_type }})
  vars:
    ingress_name: "{{ ingress_class.resources[0].metadata.name }}" 
    has_issuer: issuer_status.stdout == "Ready"
  block:  
    - include_tasks: ./tasks/task-create-certificate.yaml
      vars:
        name: argocd
        certificate_template: "{{ CERTIFICATE_TEMPLATE }}"
        
    - name: Check for ingress availability
      kubernetes.core.k8s_info:
        kind: IngressClass
      register: ingress_class
      when: _kube.ingress_type == "nginx"

    - name: Create ingress ({{ _kube.ingress_type }}) for argocd server
      kubernetes.core.k8s:
        apply: yes
        force: yes
        definition: "{{ INGRESS_TEMPLATE }}"

- name: Install argocd cli to ansible controller
  delegate_to: localhost
  vars:
    repo_path: argoproj/argo-cd 
    release: "{% if release_version is defined and release_version and release_version != 'latest' %}v{{ release_version }}{% else %}{{ release_tag.stdout }}{% endif %}"
  block:
    - name: Get latest argocd release
      shell: |
              curl -s https://api.github.com/repos/{{ repo_path }}/releases/latest | grep tag_name | cut -d '"' -f 4
      register: release_tag
      when: release_version is undefined or not release_version or release_version == "latest"

    - name: Download argocd cli
      become_user: root
      shell: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/{{ repo_path }}/releases/download/{{ release }}/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd
  when: install_cli

