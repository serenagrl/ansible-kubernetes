# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#

- name: Verify dependencies
  ansible.builtin.include_tasks: verify-dependencies.yaml

- name: Create {{ redis.namespace }} namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ redis.namespace }}"
  
- ansible.builtin.include_tasks: ./tasks/task-create-certificate.yaml
  vars:
    name: redis
    service_name: "{{ SERVICE_NAMES[redis.ha_mode] }}"
    certificate_template: "{{ CERTIFICATE_TEMPLATE }}"
  when: redis.enable_tls

- name: Deploying redis {{ redis.ha_mode }}
  vars:
    version: "{% if redis.version is defined and redis.version and redis.version != 'latest' %}{{ redis.version }}{% endif %}"
  kubernetes.core.helm:
    name: redis
    atomic: yes
    chart_ref: "{{ REPO_URLS[redis.ha_mode] }}"
    namespace: "{{ redis.namespace }}"
    create_namespace: yes
    values: "{{ VALUES_FILE }}"
    timeout: 10m0s
    wait: yes

- name: Waiting for redis pods to be ready
  ansible.builtin.shell: |
    for d in $(kubectl -n {{ redis.namespace }} get statefulset -o json | jq -r .items[].metadata.name); do kubectl rollout status -n {{ redis.namespace }} statefulset/$d; done;

- name: Extract certificates for applications
  block:
    - ansible.builtin.import_tasks: ./tasks/task-extract-cert.yaml
      vars:
        name: "Redis Certificate Authority (CA) cert"
        command: "kubectl get -n {{ redis.namespace }} secret redis-tls-secret -o jsonpath='{.data.ca\\.crt}'"
        cert_dir: "{{ CERT_DIR }}"
        filename: "{{ redis.cert.ca }}"

    - ansible.builtin.import_tasks: ./tasks/task-extract-cert.yaml
      vars:
        name: "Redis certificate"
        command: "kubectl get -n {{ redis.namespace }} secret redis-tls-secret -o jsonpath='{.data.tls\\.crt}'"
        cert_dir: "{{ CERT_DIR }}"
        filename: "{{ redis.cert.cluster }}"

    - ansible.builtin.import_tasks: ./tasks/task-extract-cert.yaml
      vars:
        name: "Redis certificate key"
        command: "kubectl get -n {{ redis.namespace }} secret redis-tls-secret -o jsonpath='{.data.tls\\.key}'"
        cert_dir: "{{ CERT_DIR }}"
        filename: "{{ redis.cert.cluster_key }}"

    - become_user: root
      delegate_to: localhost
      block:
        - name: Convert ca cert to DER (.crt)
          ansible.builtin.shell: "openssl x509 -outform der -in {{ redis.cert.ca }} -out {{ redis.cert.ca_crt }}"
          args:
            chdir: "{{ CERT_DIR }}"

        - name: Create PKCS12 cert for dotnet clients (.pfx)
          ansible.builtin.shell: "openssl pkcs12 -inkey {{ redis.cert.cluster_key }} -in {{ redis.cert.cluster }} -export -out {{ redis.cert.cluster_pfx }} -passout pass:"
          args:
            chdir: "{{ CERT_DIR }}"

  when: redis.enable_tls and redis.export_certs

- ansible.builtin.import_tasks: ./tasks/task-get-secret.yaml
  vars:
    name: "Redis {{ redis.ha_mode }} ({{ redis.namespace }}) password"
    command: "kubectl get -n {{ redis.namespace }} secret {{ SERVICE_NAMES[redis.ha_mode] }} -o jsonpath='{.data.redis-password}'"

- name: Create ServiceMonitor
  kubernetes.core.k8s:
    definition: "{{ SERVICE_MONITOR_TEMPLATE }}"
  when: redis.enable_metrics