# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: <<<<< Creates Ubuntu Hyper-V Virtual Machines >>>>>
  delegate_to: localhost
  run_once: yes
  block:
    - name: Create working directory
      ansible.builtin.file:
        path: "{{ _work_dir }}"
        state: directory

    - name: Installing iso and image tools
      ansible.builtin.apt:
        pkg:
          - cifs-utils
          - qemu-utils
          - genisoimage
        state: latest
        update_cache: yes

    - name: Downloading ubuntu cloud image
      ansible.builtin.get_url:
        url: "{{ vm.ubuntu_img_url }}"
        dest: "{{ _work_dir }}/ubuntu-cloud.img"

    - name: Generate ssh keys for Ansible host (if required)
      ansible.builtin.shell: ssh-keygen -t rsa -q -f "/root/.ssh/id_rsa" -N ""
      args:
        creates: /root/.ssh/id_rsa

- name: Prepare configuration metadata and seed iso
  delegate_to: localhost
  vars:
    backslash: '\'
    mount_path: "/mnt/{{ hostvars[winrm_host]['ansible_host'] }}"
    vm_dir: "{{ vm.local | ternary('/mnt/' + (vm.vm_folder[0] | lower) + (vm.vm_folder[2:] | replace( backslash, '/')),
                                   mount_path + '/' + (vm.vm_folder[3:] | replace(backslash, '/'))) }}"
    iso_dir: "{{ vm.local | ternary('/mnt/' + (vm.iso_folder[0] | lower) + (vm.iso_folder[2:] | replace( backslash, '/')),
                                   mount_path + '/' + (vm.iso_folder[3:] | replace(backslash, '/'))) }}"
  block:
    - name: Mount winrm_host (Hyper-V Host) shared folders
      ansible.builtin.include_tasks: mount.yaml
      vars:
        folder: "{{ item }}"
      loop:
        - "{{ vm.vm_folder.split(backslash).1 }}"
        - "{{ vm.iso_folder.split(backslash).1 }}"
      when: not vm.local

    - name: Create Virtual Hard Disks directory
      ansible.builtin.file:
        path: "{{ vm_dir }}/{{ ansible_hostname }}/Virtual Hard Disks"
        state: directory

    - name: Check for existing Virtual Hard Disks
      ansible.builtin.include_tasks: ./tasks/task-check-vhdx-exist.yaml
      vars:
        is_local: "{{ vm.local }}"
        win_folder: "{{ vm.vm_folder }}"
        host_name: "{{ ansible_hostname }}"
        disk_name: "{{ ansible_hostname }}"

    - name: Remove previous metadata directory (if any)
      ansible.builtin.file:
        path: "{{ METADATA_DIR }}"
        state: absent

    - name: Create meta-data file
      ansible.builtin.blockinfile:
        path: "{{ METADATA_DIR }}/meta-data"
        create: yes
        block: |
          instance-id: "{{ ansible_hostname }}-id"
          local-hostname: "{{ ansible_hostname }}"

    - name: Create user-data file
      vars:
        id_rsa_pub: "{{ lookup('file','/root/.ssh/id_rsa.pub') }}"
      ansible.builtin.blockinfile:
        path: "{{ METADATA_DIR }}/user-data"
        create: yes
        marker: ''
        block: "{{ CLOUD_INIT_TEMPLATE }}"

    - name: Create Seed iso
      ansible.builtin.shell: |
              mkdir -p "{{ iso_dir }}"
              genisoimage -output "{{ iso_dir }}/{{ ansible_hostname }}-seed.iso" -volid cidata -joliet -rock {{ METADATA_DIR }}

    - name: Remove metadata directory
      ansible.builtin.file:
        path: "{{ METADATA_DIR }}"
        state: absent
      when: _cleanup

    - name: Preparing vhdx files for the Virtual Machines
      vars:
        vhd_disk: "{{ vm_dir }}/{{ ansible_hostname }}/Virtual Hard Disks/{{ ansible_hostname }}.vhdx"
      ansible.builtin.shell: |
        qemu-img convert -f qcow2 ubuntu-cloud.img -O vhdx -o subformat=dynamic "{{ vhd_disk }}"
      args:
        chdir: "{{ _work_dir }}"

  always:
    - name: Unmount winrm_host (Hyper-V Host) shared folders
      vars:
        folder: "{{ mount_path }}/{{ item }}"
      ansible.builtin.shell: |
        (
            flock -x 9
            mount | grep "{{ folder }}" > /dev/null
            if [ $? -eq "0" ]
            then
              umount "{{ folder }}"
            fi
        ) 9>/tmp/mount.lock
      loop:
        - "{{ vm.vm_folder.split(backslash).1 }}"
        - "{{ vm.iso_folder.split(backslash).1 }}"
      when: not vm.local

- name: Create and Launch Virtual Machines
  delegate_to: "{{ winrm_host }}"
  vars:
    vhd_disk: "{{ vm.vm_folder }}\\{{ ansible_hostname }}\\Virtual Hard Disks\\{{ ansible_hostname }}.vhdx"
  block:
    - name: Unset sparse flag of vhdx file (fix qemu-img conversion issue)
      ansible.windows.win_powershell:
        script: |
          fsutil sparse setflag "{{ vhd_disk }}" 0
        error_action: stop

    - name: Provisioning Hyper-V Virtual Machines
      ansible.windows.win_powershell:
        script: |
          Resize-VHD -Path "{{ vhd_disk }}" -SizeBytes {{ vm.specs.disk_size }}
          New-VM -Name {{ ansible_hostname }} -Generation 2 -MemoryStartupBytes {{ vm.specs.ram_size }} -Path "{{ vm.vm_folder }}" -VHDPath "{{ vhd_disk }}" -SwitchName "{{ vm.switch }}"
          Add-VMDvdDrive {{ ansible_hostname }} -Path "{{ vm.iso_folder }}\\{{ ansible_hostname }}-seed.iso"
          Set-VMProcessor {{ ansible_hostname }} -Count {{ vm.specs.v_cpu }}
          Set-VMFirmware -VMName {{ ansible_hostname }} -EnableSecureBoot Off
          Set-VMMemory {{ ansible_hostname }} -MinimumBytes {{ vm.specs.min_ram_size }} -DynamicMemoryEnabled 1
          Start-VM {{ ansible_hostname }}
        error_action: stop

    - name: Waiting for ubuntu configuration to complete
      ansible.windows.win_powershell:
        script: |
          Wait-VM -Name {{ ansible_hostname }} -For Reboot
        error_action: stop

    - name: Unmount and remove seed.iso
      ansible.windows.win_powershell:
        script: |
          Get-VMDvdDrive -VMName "{{ ansible_hostname }}" | Remove-VMDvdDrive
          rm {{ ansible_hostname }}-seed.iso
        error_action: stop
        chdir: "{{ vm.iso_folder }}"
      when: _cleanup

- name: Setup SSH
  ansible.builtin.include_role:
    name: vm-ubuntu/setup-ssh

- name: Add hostname to /etc/hosts
  become_user: root
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: "127.0.0.1 localhost"
    line: "127.0.0.1 {{ ansible_hostname }}"

- name: Configure DNS
  become_user: root
  vars:
    register_dns: "{{ register_to_dns_server | default(false) }}"
  block:
    - name: Register to DNS server
      ansible.builtin.include_role:
        name: infrastructure/dns/register

    - name: Installing dns utility package
      ansible.builtin.apt:
        pkg:
          - resolvconf
        state: latest
        update_cache: yes

    - name: Add nameserver entry in resolvconf
      ansible.builtin.lineinfile:
        path: /etc/resolvconf/resolv.conf.d/head
        line: "nameserver {{ hostvars.dns_server.ansible_host }}"

    - name: Update resolveconf
      ansible.builtin.shell: |
        sudo resolvconf -u
        sudo systemctl restart systemd-resolved
  when: register_dns

# Create checkpoints for safety reasons. You can delete the checkpoints later.
- name: Checkpoint VM
  ansible.builtin.import_tasks: ./tasks/task-checkpoint-vm.yaml
  vars:
    checkpoint_name: "Ubuntu configured."
  when: _checkpoint