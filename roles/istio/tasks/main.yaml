# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: Get latest istio release
  shell: |
          curl -s https://api.github.com/repos/istio/istio/releases/latest | grep tag_name | cut -d '"' -f 4
  register: release_tag
  when: release_version is undefined or not release_version or release_version == "latest"

- name: Install istioctl
  become_user: root
  shell: | 
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION={{ RELEASE }} sh -
  args:
    chdir: "{{ _work_dir }}"

  delegate_to: localhost

- name: Copy istioctl from Ansible host to the control plane
  become_user: root
  copy:
    src: "{{ ISTIO_DIR }}/bin/istioctl"
    dest: "{{ istioctl_dir }}"
    mode: 0777

- name: Installing istio
  shell: |
          istioctl install --set profile={{ profile }} -y --set components.egressGateways[0].name=istio-egressgateway --set components.egressGateways[0].enabled=true	
          kubectl rollout status -n istio-system deployment/istiod

- name: Patch istio ingress gateway to use NodePort
  kubernetes.core.k8s:
    state: patched
    namespace: istio-system
    kind: Service
    name: istio-ingressgateway
    definition: |
      spec:
        type: NodePort
        ports:
        - nodePort: {{ addons.nodeports.gateway.http }}
          port: 80
        - nodePort: {{ addons.nodeports.gateway.https }}
          port: 443
  when: _kube.use_nodeport                  

- name: Labeling namespaces for istio injection (if any)
  kubernetes.core.k8s:
    state: patched
    kind: Namespace
    name: "{{ item }}"
    definition: |
      metadata:
        labels:
          istio-injection: enabled
  loop: "{{ inject if inject is iterable else [] }}"

- name: Check if Prometheus is installed
  shell: |
      kubectl get prometheus k8s -n monitoring -o json | jq .status.conditions[0].type -r
  register: prometheus_status
  ignore_errors: yes

- name: Configure integration with Prometheus
  block:
    - name: Export existing additional scrape configs to file
      shell: |
        kubectl -n monitoring get secret additional-scrape-configs -o jsonpath="{['data']['prometheus-additional\.yaml']}" | base64 --decode > {{ SCRAPE_CONFIG }}
      args:
        chdir: $HOME  

    - name: Add istio scrape configs to scrape configs file
      blockinfile:
        path: "~/{{ SCRAPE_CONFIG }}"
        marker: ""
        block: "{{ SCRAPE_CONFIG_TEMPLATE }}"

    - name: Create secret for additional Prometheus scrape configs
      shell: |
        kubectl create secret generic additional-scrape-configs --from-file={{ SCRAPE_CONFIG }} --dry-run=client -o yaml > {{ SECRET_CONFIG }}
      args:
        chdir: $HOME  

    - name: Apply additional scrape configs
      kubernetes.core.k8s:
        namespace: monitoring
        src: "~/{{ SECRET_CONFIG }}"

    - name: Patch prometheus to include additional scrape configs
      kubernetes.core.k8s:
        state: patched
        namespace: monitoring
        name: k8s
        kind: Prometheus
        definition: |
          spec:
            additionalScrapeConfigs:
              name: additional-scrape-configs
              key: prometheus-additional.yaml

    - name: Patch Prometheus ClusterRole
      shell: |
        kubectl -n monitoring patch clusterrole prometheus-k8s --type='json' -p='[{"op": "add", "path": "/rules/0", "value":{ "apiGroups": [""], "resources": ["nodes","services","endpoints","nodes/proxy","pods"], "verbs": ["get","list","watch"]}}]'
        kubectl -n monitoring patch clusterrole prometheus-k8s --type='json' -p='[{"op": "add", "path": "/rules/0", "value":{ "apiGroups": [""], "resources": ["configmaps"], "verbs": ["get"]}}]'

  when: HAS_PROMETHEUS

- name: Install Jaeger and Kiali
  block:
    - name: Configure Prometheus and Grafana
      blockinfile:
        path: "{{ ADDONS_DIR }}/kiali.yaml"
        insertafter: "root_namespace: istio-system"
        marker: "      # ANSIBLE MANAGED BLOCK"
        block: |2
                prometheus:
                  url: "http://prometheus-k8s.monitoring.svc:9090/prometheus"
                grafana:
                  enabled: true
                  in_cluster_url: 'http://grafana.monitoring.svc:3000/'
                  url: 'http://serena.k8s.local/grafana'
      delegate_to: localhost
                        
    - name: Install istio addons
      kubernetes.core.k8s:
        definition: "{{ lookup('file', '{{ item }}') | from_yaml_all }}"
      with_fileglob:
        - "{{ ADDONS_DIR }}/jaeger.yaml"
        - "{{ ADDONS_DIR }}/kiali.yaml"

    - name: Waiting for kiali deployment to complete
      shell: kubectl rollout status -n istio-system deployment/kiali

    - name: Patch kiali service to use NodePort {{ addons.nodeports.kiali }}
      kubernetes.core.k8s:
        state: patched
        namespace: istio-system
        kind: Service
        name: kiali
        definition: |
          spec:
            type: NodePort
            ports:
            - nodePort: {{ addons.nodeports.kiali }}
              port: 20001
      when: _kube.use_nodeport

    - name: Check for ingress availability
      kubernetes.core.k8s_info:
        kind: IngressClass
      register: ingress_class

    - name: Create ingress for kiali 
      vars:
        ingress_name: "{{ ingress_class.resources[0].metadata.name }}"
      kubernetes.core.k8s:
        apply: yes
        force: yes
        definition: "{{ KIALI_INGRESS_TEMPLATE }}"

- name: Cleanup
  block:
    - name: Cleanup config files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "~/{{ SCRAPE_CONFIG }}"
        - "~/{{ SECRET_CONFIG }}"
    
    - name: Cleanup 
      become_user: root
      file:
        path: "{{ ISTIO_DIR }}"
        state: absent
      delegate_to: localhost
  when: cleanup
