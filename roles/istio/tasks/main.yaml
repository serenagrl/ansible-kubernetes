# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#

- name: Verify dependencies
  ansible.builtin.include_tasks: verify-dependencies.yaml

- name: Get latest istio release
  ansible.builtin.shell: |
    curl -s https://api.github.com/repos/istio/istio/releases/latest | grep tag_name | cut -d '"' -f 4
  register: release_tag
  when: istio.version is undefined or not istio.version or istio.version == "latest"

- name: Install istioctl {{ RELEASE }}
  delegate_to: localhost
  become_user: root
  ansible.builtin.shell: |
    curl -L https://istio.io/downloadIstio | ISTIO_VERSION={{ RELEASE }} sh -
  args:
    chdir: "{{ temp_dir }}"

- name: Copy istioctl from Ansible host to the control plane
  become_user: root
  ansible.builtin.copy:
    src: "{{ ISTIO_DIR }}/bin/istioctl"
    dest: "{{ istio.istioctl_dir }}"
    mode: 0777

- name: Create working directory
  ansible.builtin.file:
    path: "{{ MANIFEST_DIR }}"
    state: directory

- name: Create istio operator manifest
  ansible.builtin.copy:
    content: "{{ OPERATOR_MANIFEST_TEMPLATE }}"
    dest: "{{ MANIFEST_FILE }}"

- name: Installing istio
  ansible.builtin.shell: |
    istioctl install --set profile={{ istio.profile }} -y -f {{ MANIFEST_FILE }}
    kubectl rollout status -n istio-system deployment/istiod
  notify: "istio : Update installed status"

- name: Labeling namespaces for istio injection (if any)
  kubernetes.core.k8s:
    state: patched
    kind: Namespace
    name: "{{ item }}"
    definition: |
      metadata:
        labels:
          istio-injection: enabled
  loop: "{{ istio.inject if istio.inject is iterable else [] }}"

- name: Configure integration with Prometheus
  block:
    - name: Set label
      delegate_to: localhost
      become_user: root
      ansible.builtin.replace:
        path: "{{ SERVICE_MONITOR_FILE }}"
        regexp: "release: istio"
        replace: "release: monitoring"

    - name: Setup integration with Prometheus
      kubernetes.core.k8s:
        apply: yes
        force: yes
        definition: "{{ lookup('file', SERVICE_MONITOR_FILE) | from_yaml_all }}"
  when: fact_has_addons_prometheus|bool

- name: Install Jaeger and Kiali
  block:
    - name: Configure Prometheus and Grafana
      delegate_to: localhost
      become_user: root
      ansible.builtin.blockinfile:
        path: "{{ ADDONS_DIR }}/kiali.yaml"
        insertafter: "root_namespace: istio-system"
        marker: "      # ANSIBLE MANAGED BLOCK"
        block: |2
                prometheus:
                  url: "http://monitoring-prometheus.monitoring.svc:9090/prometheus"
                grafana:
                  enabled: true
                  in_cluster_url: 'http://monitoring-grafana.monitoring.svc:80/'
                  url: 'http://{{ kube.cluster.name }}.{{ kube.cluster.domain }}/grafana'

    - name: Configure to run on control-planes only
      delegate_to: localhost
      become_user: root
      ansible.builtin.replace:
        path: "{{ ADDONS_DIR }}/{{ item }}"
        regexp: '^\s*(containers:)$'
        replace: |4-
                  tolerations:
                    - effect: NoSchedule
                      key: node-role.kubernetes.io/control-plane
                      operator: Exists
                  nodeSelector:
                    node-role.kubernetes.io/control-plane: ""
                  \1
      loop:
        - jaeger.yaml
        - kiali.yaml
      when: not kube.allow_scheduling

    - name: Install istio addons
      kubernetes.core.k8s:
        definition: "{{ lookup('file', '{{ item }}') | from_yaml_all }}"
      with_fileglob:
        - "{{ ADDONS_DIR }}/jaeger.yaml"
        - "{{ ADDONS_DIR }}/kiali.yaml"

    - name: Waiting for kiali deployment to complete
      ansible.builtin.shell: kubectl rollout status -n istio-system deployment/kiali

    # Notes: Use cluster's domain name and with custom route /kiali
    - name: Setup ingress
      ansible.builtin.include_tasks: "{{ INGRESS_SETUP }}"
      vars:
        name: kiali
        namespace: istio-system
        in_definition: "{{ INGRESS_TEMPLATE }}"
        in_create: yes

- name: Cleanup
  block:
    - name: Cleanup config files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ MANIFEST_DIR }}"

    - name: Cleanup
      delegate_to: localhost
      become_user: root
      ansible.builtin.file:
        path: "{{ ISTIO_DIR }}"
        state: absent
  when: auto_cleanup

- name: Flush handlers
  ansible.builtin.meta: flush_handlers