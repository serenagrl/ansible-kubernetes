- name: Create default environments
  vars:
    environment_url: "{{ SEMAPHORE_URL }}/project/{{ SEMAPHORE_PROJECT_ID }}/environment"
  block:
    - name: Search default empty environment
      ansible.builtin.uri:
        url: "{{ environment_url }}?sort=db-deploy&order=desc" # Default value from https://www.semui.co/api-docs
        method: GET
        return_content: true
        headers: 
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ SEMAPHORE_ACCESS_TOKEN }}"
        status_code: 200
      register: existing_environment

    - name: Delete default empty environment
      ansible.builtin.uri:
        url: "{{ environment_url }}/{{ item.id }}"
        method: DELETE
        headers: 
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ SEMAPHORE_ACCESS_TOKEN }}"
        status_code: 204 # Environment Removed 
      loop: "{{ existing_environment.json }}"
    
    - name: Find variable files
      delegate_to: localhost
      become_user: root
      ansible.builtin.find:
        paths: ./roles
        file_type: directory
        recurse: yes
        use_regex: yes
        patterns: ['.*vars']
      register: file_result

    - name: Read role variable files
      ansible.builtin.slurp:
        src: "{{ local_repo_dir + '/' + item + '/main.yaml' }}"
      register: var_files
      loop: "{{ file_result.files | map(attribute='path') | list}}"

    - name: Create default environments
      vars:
        name_prefix: "{{ semaphore.project.hostname_prefix | default('k8s') }}"

        add_on_vars:
            add_ons: "{{ item.content }}"

        all_vars:

        vm_ubuntu_presets:
          vm:
            local: no

        # infrastructure
        vm_ubuntu_vars: "{{ var_files | community.general.json_query('results[?contains(source, `setup-vm/vars`)].content') | b64decode | from_yaml | combine(vm_ubuntu_presets, recursive=true) }}"
        haproxy_vars: "{{ var_files | community.general.json_query('results[?contains(source, `haproxy/vars`)].content') | b64decode | from_yaml }}"
        nfs_server_vars: "{{ var_files | community.general.json_query('results[?contains(source, `nfs/server/vars`)].content') | b64decode | from_yaml }}"
        k8s_cluster_node_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/kubernetes/cluster-node/vars`)].content') | b64decode | from_yaml }}"
        k8s_control_plane_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/kubernetes/control-plane/vars`)].content') | b64decode | from_yaml }}"
        k8s_worker_node_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/kubernetes/worker-node/vars`)].content') | b64decode | from_yaml }}"
        infra_vars: "{{ vm_ubuntu_vars | combine(haproxy_vars, recursive=true) 
                                       | combine(nfs_server_vars, recursive=true)
                                       | combine(k8s_cluster_node_vars, recursive=true)
                                       | combine(k8s_control_plane_vars, recursive=true)
                                       | combine(k8s_worker_node_vars, recursive=true) }}"

        k8s_default_add_ons_vars:
          - { name: metallb, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/metallb/vars`)].content') | b64decode | from_yaml }}" }
          - { name: cert-manager, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/cert-manager/vars`)].content') | b64decode | from_yaml }}" }
          - { name: ingress, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/ingress/nginx/vars`)].content') | b64decode | from_yaml }}" }
          - { name: dashboard }
          - { name: monitoring }
          - { name: metrics-server }

        rabbitmq_root_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/rabbitmq/vars`)].content') | b64decode | from_yaml }}"
        rabbitmq_operator_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/rabbitmq/operator/vars`)].content') | b64decode | from_yaml }}"
        rabbitmq_cluster_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/rabbitmq/cluster/vars`)].content') | b64decode | from_yaml }}"
        rabbitmq_topology_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/rabbitmq/topology/vars`)].content') | b64decode | from_yaml }}"
        rabbitmq_vars:
          - { name: rabbitmq, vars: "{{ rabbitmq_root_vars | combine(rabbitmq_operator_vars, recursive=true)
                                                           | combine(rabbitmq_cluster_vars, recursive=true)
                                                           | combine(rabbitmq_topology_vars, recursive=true) }}" }

        redis_vars:
          - { name: redis, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/redis/vars`)].content') | b64decode | from_yaml }}" }

        gitlab_vars:
          - { name: devops/gitlab, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/gitlab/vars`)].content') | b64decode | from_yaml }}" }
          - { name: devops/gitlab-runner, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/gitlab-runner/vars`)].content') | b64decode | from_yaml }}" }

        sonarqube_vars:
          - { name: devops/sonarqube, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/sonarqube/vars`)].content') | b64decode | from_yaml }}" }

        harbor_vars:
          - { name: devops/harbor, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/harbor/vars`)].content') | b64decode | from_yaml }}" }

        argocd_vars:
          - { name: devops/argocd, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/argocd/vars`)].content') | b64decode | from_yaml }}" }

        velero_cli_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/velero/cli/vars`)].content') | b64decode | from_yaml }}"
        velero_svr_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/velero/server/vars`)].content') | b64decode | from_yaml }}"
        velero_bsl_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/velero/storage-location/vars`)].content') | b64decode | from_yaml }}"
        velero_vars:
          - { name: velero, vars: "{{ velero_cli_vars | combine(velero_svr_vars, recursive=true) | combine(velero_bsl_vars, recursive=true) }}" }

        semaphore_reg_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/semaphore/register/vars`)].content') | b64decode | from_yaml }}"

        elastic_operator_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/logging/elastic-operator/vars`)].content') | b64decode | from_yaml }}"
        elasticsearch_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/logging/elasticsearch/vars`)].content') | b64decode | from_yaml }}"
        kibana_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/logging/kibana/vars`)].content') | b64decode | from_yaml }}"
        elastic_stack_vars:
          - { name: logging/elastic-stack, vars: "{{ elastic_operator_vars | combine(elasticsearch_vars, recursive=true)
                                                                           | combine(kibana_vars, recursive=true) }}" }

        fluentd_vars:
          - { name: logging/fluentd, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/logging/fluentd/vars`)].content') | b64decode | from_yaml }}" }

        istio_vars:
          - { name: istio, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/istio/vars`)].content') | b64decode | from_yaml }}" }

        rook_ceph_operator_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/rook-ceph/operator/vars`)].content') | b64decode | from_yaml }}"
        rook_ceph_cluster_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/rook-ceph/cluster/vars`)].content') | b64decode | from_yaml }}"
        rook_ceph_vars:
          - { name: csi/rook-ceph, vars: "{{ rook_ceph_operator_vars | combine(rook_ceph_cluster_vars, recursive=true) }}" }

        mssql_vars:
          - { name: database/mssql, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/mssql/vars`)].content') | b64decode | from_yaml }}" }

        awx_reg_vars:
          - { name: awx/operator, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/awx/operator/vars`)].content') | b64decode | from_yaml }}" }
          - { name: awx/register, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/awx/register/vars`)].content') | b64decode | from_yaml }}" }

        kafka_root_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/vars`)].content') | b64decode | from_yaml }}"
        kafka_bridge_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/bridge/vars`)].content') | b64decode | from_yaml }}"
        kafka_cluster_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/cluster/vars`)].content') | b64decode | from_yaml }}"
        kafka_connect_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/connect/vars`)].content') | b64decode | from_yaml }}"
        kafka_common_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/common/vars`)].content') | b64decode | from_yaml }}"
        kafka_strimzi_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/strimzi/vars`)].content') | b64decode | from_yaml }}"
        kafka_ui_vars: "{{ var_files | community.general.json_query('results[?contains(source, `roles/kafka/ui/vars`)].content') | b64decode | from_yaml }}"
        kafka_vars:
          - { name: kafka, vars: "{{ kafka_strimzi_vars | combine(kafka_root_vars, recursive=true)
                                                        | combine(kafka_bridge_vars, recursive=true)
                                                        | combine(kafka_cluster_vars, recursive=true)
                                                        | combine(kafka_connect_vars, recursive=true)
                                                        | combine(kafka_common_vars, recursive=true)
                                                        | combine(kafka_ui_vars, recursive=true) }}" }

        knative_operator_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/knative/operator/vars`)].content') | b64decode | from_yaml }}"
        knative_serving_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/knative/serving/vars`)].content') | b64decode | from_yaml }}"
        knative_eventing_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/knative/eventing/vars`)].content') | b64decode | from_yaml }}"
        knative_eventing_rabbitmq_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/knative/eventing/controller/rabbitmq/vars`)].content') | b64decode | from_yaml }}"
        knative_eventing_kafka_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/knative/eventing/controller/kafka/vars`)].content') | b64decode | from_yaml }}"
        knative_cli_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/knative/cli/vars`)].content') | b64decode | from_yaml }}"
        knative_vars:
          - { name: knative, vars: "{{ knative_operator_vars | combine(knative_serving_vars, recursive=true)
                                                             | combine(knative_eventing_vars, recursive=true)
                                                             | combine(knative_eventing_rabbitmq_vars, recursive=true)
                                                             | combine(knative_eventing_kafka_vars, recursive=true)
                                                             | combine(knative_cli_vars, recursive=true) }}" }

        goldilocks_vars:
          - { name: goldilocks, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/goldilocks/vars`)].content') | b64decode | from_yaml }}" }

        keycloak_vars:
          - { name: keycloak, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/keycloak/vars`)].content') | b64decode | from_yaml }}" }

        tracing_vars:
          - { name: tracing/jaeger, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/tracing/jaeger/vars`)].content') | b64decode | from_yaml }}" }
          - { name: tracing/open-telemetry, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/tracing/open-telemetry/vars`)].content') | b64decode | from_yaml }}" }

        loki_vars:
          - { name: logging/loki, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/loki/vars`)].content') | b64decode | from_yaml }}" }

        tekton_pipelines_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/tekton/pipelines/vars`)].content') | b64decode | from_yaml }}"
        tekton_triggers_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/tekton/triggers/vars`)].content') | b64decode | from_yaml }}"
        tekton_dashboard_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/tekton/dashboard/vars`)].content') | b64decode | from_yaml }}"
        tekton_cli_vars: "{{ var_files | community.general.json_query('results[?contains(source, `/tekton/cli/vars`)].content') | b64decode | from_yaml }}"
        tekton_vars:
          - { name: devops/tekton, vars: "{{ tekton_pipelines_vars | combine(tekton_triggers_vars, recursive=true)
                                                             | combine(tekton_dashboard_vars, recursive=true)
                                                             | combine(tekton_cli_vars, recursive=true) }}" }

        minio_vars:
          - { name: devops/minio, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/minio/vars`)].content') | b64decode | from_yaml }}" }

        longhorn_vars:
          - { name: csi/longhorn, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/longhorn/vars`)].content') | b64decode | from_yaml }}" }

        nfs_vars:
          - { name: csi/nfs, vars: "{{ var_files | community.general.json_query('results[?contains(source, `/csi/nfs/vars`)].content') | b64decode | from_yaml }}" }

      ansible.builtin.uri:
        url: "{{ environment_url }}"
        method: POST
        headers:
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ SEMAPHORE_ACCESS_TOKEN }}"
        body_format: json
        body: |
          {
            "name": "{{ item.name }}",
            "project_id": {{ SEMAPHORE_PROJECT_ID }},
            "json": {{ item.need_all | ternary(all_vars, []) | combine(item.is_add_on | ternary(add_on_vars, item.content), recursive=true) | to_nice_json(sort_keys=false, indent=2) | to_json }},
            "env": "{}"
          }
        status_code: 204 # Created
      when: item.create
      loop:
        - { name: "Setup Infrastructure", create: yes, content: "{{ infra_vars }}", is_add_on: no, need_all: yes }
        - { name: "Setup Basic Add-Ons", create: yes, content: "{{ k8s_default_add_ons_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Semaphore Project", create: "{{ semaphore.project.create.setup_semaphore_project }}", content: "{{ semaphore_reg_vars }}", is_add_on: no, need_all: no }
        - { name: "Setup Add-On - DevOps (Gitlab)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ gitlab_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - DevOps (Sonarqube)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ sonarqube_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - DevOps (Harbor)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ harbor_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - DevOps (ArgoCD)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ argocd_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - RabbitMQ", create: "{{ semaphore.project.create.component_environments }}", content: "{{ rabbitmq_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Redis", create: "{{ semaphore.project.create.component_environments }}", content: "{{ redis_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Velero", create: "{{ semaphore.project.create.component_environments }}", content: "{{ velero_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Logging (Elastic Stack)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ elastic_stack_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Logging (Fluentd)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ fluentd_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Istio", create: "{{ semaphore.project.create.component_environments }}", content: "{{ istio_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - CSI (Rook-Ceph)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ rook_ceph_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - MSSQL Server", create: "{{ semaphore.project.create.component_environments }}", content: "{{ mssql_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - AWX", create: "{{ semaphore.project.create.component_environments }}", content: "{{ awx_reg_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Kafka", create: "{{ semaphore.project.create.component_environments }}", content: "{{ kafka_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Knative", create: "{{ semaphore.project.create.component_environments }}", content: "{{ knative_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Goldilocks", create: "{{ semaphore.project.create.component_environments }}", content: "{{ goldilocks_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Keycloak", create: "{{ semaphore.project.create.component_environments }}", content: "{{ keycloak_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Tracing", create: "{{ semaphore.project.create.component_environments }}", content: "{{ tracing_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - Logging (Loki)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ loki_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - DevOps (Tekton)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ tekton_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - DevOps (Minio)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ minio_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - CSI (Longhorn)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ longhorn_vars }}", is_add_on: yes, need_all: yes }
        - { name: "Setup Add-On - CSI (NFS)", create: "{{ semaphore.project.create.component_environments }}", content: "{{ nfs_vars }}", is_add_on: yes, need_all: yes }

    - name: Query all environment records
      ansible.builtin.uri:
        url: "{{ SEMAPHORE_URL }}/project/{{ SEMAPHORE_PROJECT_ID }}/environment"
        method: GET
        headers:
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ SEMAPHORE_ACCESS_TOKEN }}"
      register: environment_response
