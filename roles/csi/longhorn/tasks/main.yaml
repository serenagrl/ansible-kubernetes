# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#

- name: Verify dependencies
  ansible.builtin.include_tasks: verify-dependencies.yaml

- name: Install and configure pre-requisites
  ansible.builtin.include_tasks: "{{ ansible_distribution | lower }}/install-packages.yaml"
  loop: "{{ fact_active_hosts }}"

- name: Create longhorn system namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: longhorn-system

  # Notes: Use cluster's domain name and with custom route /longhorn
- name: Setup ingress
  ansible.builtin.include_tasks: "{{ INGRESS_SETUP }}"
  vars:
    name: longhorn
    namespace: longhorn-system
    in_definition: "{{ INGRESS_TEMPLATE }}"
    in_create: "{{ INGRESS_CREATE }}"

- name: Add longhorn chart repo
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: "https://charts.longhorn.io"

- name: Deploy longhorn
  vars:
    ingress_name: "{{ ingress_class.resources[0].metadata.name }}"
    ingress_host: "{{ ingress_host_result.stdout | default(kube.cluster.name + '.' + kube.cluster.domain, true) }}"
    version: "{% if longhorn.version is defined and longhorn.version and longhorn.version != 'latest' %}{{ longhorn.version }}{% endif %}"
  kubernetes.core.helm:
    name: longhorn
    atomic: yes
    chart_ref: longhorn/longhorn
    chart_version: "{{ version }}"
    namespace: longhorn-system
    create_namespace: yes
    values: "{{ VALUES_FILE }}"
    wait: yes

- name: Waiting for longhorn to be ready
  ansible.builtin.shell: |
    for d in $(kubectl -n longhorn-system get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n longhorn-system deployment/$d; done;
    for d in $(kubectl -n longhorn-system get daemonset -o json | jq -r .items[].metadata.name); do kubectl rollout status -n longhorn-system daemonset/$d; done;

- name: Create ServiceMonitor
  kubernetes.core.k8s:
    template: service-monitor.j2
  when: longhorn.prometheus.enabled|bool and fact_has_addon_prometheus|bool

- name: Download dashboard json model to ansible controller host
  delegate_to: localhost
  become_user: root
  block:
    - name: Create dashboard download directory
      ansible.builtin.file:
        path: "{{ DASHBOARDS_TEMP_DIR }}"
        state: directory

    - name: Download dashboard json model
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ DASHBOARDS_TEMP_DIR }}"
        force: yes
      loop: "{{ longhorn.prometheus.grafana_dashboards }}"

- name: Create dashboard configmap
  vars:
    # extract the name and load the file.
    fname: "{{ item | basename }}"
    data: "{{ lookup('file', item) }}"

    # build a dictionary to form "fname": "data"
    cm_data: "{{ [{'key': fname, 'value': data | to_nice_json} ] | items2dict }}"
  kubernetes.core.k8s:
    api_version: v1
    kind: ConfigMap
    name: "longhorn-{{ item | basename | replace('_','')  | splitext | first }}-grafana"
    namespace: longhorn-system
    definition:
      metadata:
        labels:
          grafana_dashboard: "1"
      data: |
        {{ cm_data }}
  loop: "{{ q('fileglob', DASHBOARDS_TEMP_DIR + '/*.json') }}"

- name: Configure local minio backupstore
  kubernetes.core.k8s:
    template: secret.yaml.j2
  when: longhorn.minio.enabled

- name: Create external virtual disk storage
  vars:
    virtual_disk: "{{ longhorn.disk }}"
  ansible.builtin.include_role:
    name: csi/longhorn/create-disk
  when: longhorn.disk.create