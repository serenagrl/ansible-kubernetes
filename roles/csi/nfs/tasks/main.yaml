# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: Install and configure nfs clients
  vars:
    nfs_client: "{{ item }}"
    nfs_shared: "{{ csi_nfs.shared }}"
  ansible.builtin.include_role:
    name: nfs/client
  loop: "{{ fact_active_hosts }}"

- name: Download and configure nfs provisioner
  delegate_to: localhost
  become_user: root
  block:
    - ansible.builtin.import_tasks: ./tasks/task-git-clone.yaml
      vars:
        name: "nfs provisioner"
        repo_path: "kubernetes-sigs/nfs-subdir-external-provisioner"
        pkg_version: "{{ csi_nfs.version | default }}"
        version_prefix: "nfs-subdir-external-provisioner-"
        url: "https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/"
        dest: "{{ REPO_DIR }}"

    - name: Configure nfs provisioner
      ansible.builtin.shell: |
              sed -i 's/nfs-subdir-external-provisioner$/nfs-provisioner/g' deployment.yaml
              sed -i "s/10.3.243.101$/{{ hostvars['nfs_server'].ansible_hostname }}/g" deployment.yaml
              sed -i "s/\/ifs\/kubernetes$/\{{ csi_nfs.shared }}/g" deployment.yaml
              sed -i 's/nfs-subdir-external-provisioner/nfs-provisioner/g' class.yaml
              sed -i 's/nfs-client/{{ csi_nfs.storage_name }}/g' class.yaml
              sed -i "s/namespace:.*/namespace: {{ csi_nfs.provisioner_namespace }}/g" rbac.yaml deployment.yaml
      args:
        chdir: "{{ DEPLOY_DIR }}"

    - name: Configure to run on control-planes only
      ansible.builtin.replace:
        path: "{{ DEPLOY_DIR }}/deployment.yaml"
        regexp: '^\s*(volumes:)$'
        replace: |4-
                  tolerations:
                    - effect: NoSchedule
                      key: node-role.kubernetes.io/control-plane
                      operator: Exists
                  nodeSelector:
                    node-role.kubernetes.io/control-plane:
                  \1

- name: Configure nfs provisioner on kubernetes cluster
  block:
    - name: Create {{ csi_nfs.provisioner_namespace }} namespace
      kubernetes.core.k8s:
        kind: Namespace
        name: "{{ csi_nfs.provisioner_namespace }}"

    - name: Apply configuration changes
      kubernetes.core.k8s:
        apply: yes
        force: yes
        definition: "{{ lookup('file', item) | from_yaml_all }}"
      loop:
        - "{{ DEPLOY_DIR }}/rbac.yaml"
        - "{{ DEPLOY_DIR }}/class.yaml"
        - "{{ DEPLOY_DIR }}/deployment.yaml"

    - name: Set to default storage class to {{ csi_nfs.is_default }}
      kubernetes.core.k8s:
        state: patched
        kind: StorageClass
        name: "{{ csi_nfs.storage_name }}"
        definition: |
          metadata:
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
      when: csi_nfs.is_default

    - name: Create persistent volume claims
      kubernetes.core.k8s:
        apply: yes
        force: yes
        namespace: "{{ csi_nfs.provisioner_namespace }}"
        definition: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: {{ csi_nfs.pvc.name }}
            labels:
              storage.k8s.io/name: nfs
          spec:
            accessModes:
              - ReadWriteMany
            storageClassName: {{ csi_nfs.storage_name }}
            resources:
              requests:
                storage: {{ csi_nfs.pvc.size }}

- name: Cleanup directories
  delegate_to: localhost
  become_user: root
  ansible.builtin.file:
    path: "{{ REPO_DIR }}"
    state: absent
  when: auto_cleanup
