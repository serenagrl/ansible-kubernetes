# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#

- name: Verify dependencies
  ansible.builtin.include_tasks: verify-dependencies.yaml

- name: Create {{ rabbitmq.namespace }} namespace
  kubernetes.core.k8s:
    name: "{{ rabbitmq.namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Create RabbitMQ certificates
  block:
    - name: Create RabbitMQ cluster certificate
      ansible.builtin.include_tasks: ./tasks/task-create-certificate.yaml
      vars:
        name: RabbitMQ Cluster
        certificate_template: "{{ RABBITMQ_CLUSTER_CERTIFICATE_TEMPLATE }}"

    - name: Create RabbitMQ client certificate
      ansible.builtin.include_tasks: ./tasks/task-create-certificate.yaml
      vars:
        name: RabbitMQ Client
        certificate_template: "{{ RABBITMQ_CLIENT_CERTIFICATE_TEMPLATE }}"
      when: not rabbitmq.vault.enabled
  when: rabbitmq.enable_tls

- name: Create Vault certificate
  ansible.builtin.include_tasks: ./tasks/task-create-certificate.yaml
  vars:
    name: Vault
    certificate_template: "{{ VAULT_CLIENT_CERTIFICATE_TEMPLATE }}"
  when: rabbitmq.vault.enabled

- name: Create RabbitMQ cluster
  kubernetes.core.k8s:
    definition: "{{ TEMPLATE }}"

# Notes: Use cluster's domain name and with custom route /rabbitmq
- name: Setup ingress
  ansible.builtin.include_tasks: "{{ INGRESS_SETUP }}"
  vars:
    name: rabbitmq-management
    namespace: "{{ rabbitmq.namespace }}"
    in_definition: "{{ INGRESS_TEMPLATE }}"
    in_create: yes

- name: Waiting for rabbitmq cluster to be ready
  ansible.builtin.shell: "kubectl rollout status -n {{ rabbitmq.namespace }} statefulset/{{ rabbitmq.name }}-server"

- name: Extract certificates for applications
  block:
    - ansible.builtin.import_tasks: ./tasks/task-extract-cert.yaml
      vars:
        name: "RabbitMQ Certificate Authority (CA) cert"
        command: "kubectl get -n {{ rabbitmq.namespace }} secret rabbitmq-tls-secret -o jsonpath='{.data.ca\\.crt}'"
        cert_dir: "{{ CERT_DIR }}"
        filename: "{{ rabbitmq.cert.ca }}"

    - ansible.builtin.import_tasks: ./tasks/task-extract-cert.yaml
      vars:
        name: "RabbitMQ client certificate"
        command: "kubectl get -n {{ rabbitmq.namespace }} secret rabbitmq-client-tls -o jsonpath='{.data.tls\\.crt}'"
        cert_dir: "{{ CERT_DIR }}"
        filename: "{{ rabbitmq.cert.client }}"
      when: not rabbitmq.vault.enabled

    - ansible.builtin.import_tasks: ./tasks/task-extract-cert.yaml
      vars:
        name: "RabbitMQ client certificate key"
        command: "kubectl get -n {{ rabbitmq.namespace }} secret rabbitmq-client-tls -o jsonpath='{.data.tls\\.key}'"
        cert_dir: "{{ CERT_DIR }}"
        filename: "{{ rabbitmq.cert.client_key }}"
      when: not rabbitmq.vault.enabled

    - become_user: root
      delegate_to: localhost
      block:
        - name: Convert ca cert to DER (.crt)
          ansible.builtin.shell: "openssl x509 -outform der -in {{ rabbitmq.cert.ca }} -out {{ rabbitmq.cert.ca_crt }}"
          args:
            chdir: "{{ CERT_DIR }}"

        - name: Create PKCS12 cert for dotnet clients (.pfx)
          ansible.builtin.shell: "openssl pkcs12 -inkey {{ rabbitmq.cert.client_key }} -in {{ rabbitmq.cert.client }} -export -out {{ rabbitmq.cert.client_pfx }} -passout pass:"
          args:
            chdir: "{{ CERT_DIR }}"
      when: not rabbitmq.vault.enabled
      
  when: rabbitmq.enable_tls and rabbitmq.export_certs

# NOTE: Allow topology to have different ca cert.
- name: Configure topology TLS
  block:
    - name: Retrieve RabbitMQ CA certificate from RabbitMQ Cluster
      ansible.builtin.shell: |
        kubectl get -n {{ rabbitmq.namespace }} secret rabbitmq-tls-secret -o jsonpath='{.data.ca\.crt}'
      register: ca_cert_result

    - name: Add CA certificate into rabbitmq CA secret
      kubernetes.core.k8s:
        state: patched
        namespace: "rabbitmq-system"
        kind: secret
        name: rabbitmq-ca-secret
        definition: |
          data:
            {{ rabbitmq.name }}-{{ rabbitmq.namespace }}-ca.crt: {{ ca_cert_result.stdout }}

    - name: Mount CA certificate volume to cert path
      kubernetes.core.k8s:
        state: patched
        namespace: "rabbitmq-system"
        kind: Deployment
        name: messaging-topology-operator
        definition: |
          spec:
            template:
              spec:
                containers:
                  - name: manager
                    volumeMounts:
                      - mountPath: /etc/ssl/certs/{{ rabbitmq.namespace }}-rabbitmq-ca.crt
                        name: rabbitmq-ca
                        subPath: {{ rabbitmq.namespace }}-rabbitmq-ca.crt

  when: rabbitmq.enable_tls and rabbitmq.use_topology_operator

- name: Create ServiceMonitor
  kubernetes.core.k8s:
    template: service-monitor.j2
  when: fact_has_addon_prometheus|bool

- ansible.builtin.import_tasks: ./tasks/task-get-secret.yaml
  vars:
    name: "RabbitMQ cluster ({{ rabbitmq.namespace }}) login"
    command: "kubectl get -n {{ rabbitmq.namespace }} secret rabbitmq-default-user -o jsonpath='{.data.default_user\\.conf}'"