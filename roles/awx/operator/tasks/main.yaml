# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
# Notes: If you set kube.allow_scheduling to no, you will need to manually add tolerations
#        to the Instance Group -> default -> custom pod spec from the AWX portal.

- name: Verify dependencies
  ansible.builtin.include_tasks: verify-dependencies.yaml

- name: Create a awx namespace
  kubernetes.core.k8s:
    name: awx
    kind: Namespace

- name: Install AWX
  vars:
    ingress_name: "{{ ingress_class.resources[0].metadata.name }}"
    ingress_host: "{{ ingress_host_result.stdout | default(kube.cluster.name + '.' + kube.cluster.domain, true) }}"
    has_operator_version_specified: "{{ (awx.operator.version is defined and awx.operator.version and awx.operator.version != 'latest') | bool }}"
    operator_release: "{{ has_operator_version_specified | ternary(awx.operator.version, operator_release_tag.stdout) }}"
    has_awx_version_specified: "{{ (awx.version is defined and awx.version and awx.version != 'latest') | bool }}"
    awx_release: "{{ has_awx_version_specified | ternary(awx.version, awx_release_tag.stdout) }}"
  block:
    # Notes: Uses cluster's domain name and with custom route /awx
    - name: Setup ingress
      ansible.builtin.include_tasks: "{{ INGRESS_SETUP }}"
      vars:
        name: awx
        namespace: awx
        in_definition: "{{ INGRESS_TEMPLATE }}"
        in_create: "{{ INGRESS_CREATE }}"

    - name: Get latest operator release
      ansible.builtin.shell: |
          curl -s "https://api.github.com/repos/ansible/awx-operator/releases/latest" | grep tag_name | cut -d '"' -f 4
      register: operator_release_tag
      when: not has_operator_version_specified

    - name: Get latest awx release
      ansible.builtin.shell: |
          curl -s "https://api.github.com/repos/ansible/awx/releases/latest" | grep tag_name | cut -d '"' -f 4
      register: awx_release_tag
      when: not has_awx_version_specified

    - delegate_to: localhost
      become_user: root
      block:
        - name: Create kustomize directory
          ansible.builtin.file:
            path: "{{ MANIFEST_FOLDER }}"
            state: directory

        - name: Create kustomization files
          ansible.builtin.copy:
            content: "{{ item.content | to_nice_yaml }}"
            dest: "{{ MANIFEST_FOLDER }}/{{ item.filename }}"
          loop:
            - { content: '{{ KUSTOMIZATION_TEMPLATE }}', filename: kustomization.yaml }
            - { content: '{{ PATCH_TOLERATIONS_TEMPLATE }}', filename: patch-tolerations.yaml }

    - name: Install awx operator and deploy awx
      kubernetes.core.k8s:
        definition: "{{ item }}"
      loop:
        - "{{ lookup('kubernetes.core.kustomize', dir=MANIFEST_FOLDER) }}"
        - "{{ MANIFEST_TEMPLATE }}"
      no_log: yes

- name: Cleanup manifest
  delegate_to: localhost
  become_user: root
  ansible.builtin.file:
    path: "{{ MANIFEST_FOLDER }}"
    state: absent
  when: auto_cleanup

- name: Install AWX cli and pre-requisites on Ansible host
  delegate_to: localhost
  become_user: root
  block:
    - name: Install AWX cli and pre-requisites on Ansible host
      ansible.builtin.include_tasks: "{{ hostvars['localhost'].ansible_distribution | lower }}/install-cli.yaml"

    - name: Install AWX Ansible galaxy collection
      community.general.ansible_galaxy_install:
        type: collection
        name: awx.awx
        dest: /usr/share/ansible/collections

- name: Waiting for AWX deployments to be ready
  ansible.builtin.shell: |
    kubectl wait --for=jsonpath='{.status.conditions[?(@.type=="Running")].reason}'="Successful" awx awx -n awx --timeout=600s
    kubectl wait --for=jsonpath='{.status.conditions[?(@.type=="Successful")].reason}'="Successful" awx awx -n awx --timeout=600s
    kubectl wait --for=jsonpath='{.status.conditions[?(@.type=="Successful")].status}'="True" awx awx -n awx --timeout=600s
    for d in $(kubectl -n awx get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n awx deployment/$d; done;
    for d in $(kubectl -n awx get statefulset -o json | jq -r .items[].metadata.name); do kubectl rollout status -n awx statefulset/$d; done;

- ansible.builtin.import_tasks: ./tasks/task-get-secret.yaml
  vars:
    name: "AWX portal password"
    command: "kubectl get secret -n awx awx-admin-password -o jsonpath='{.data.password}'"