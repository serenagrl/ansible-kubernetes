# Author: Serena Yeoh
# Co-Author: Jaryl Lan
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#

- name: Verify dependencies
  ansible.builtin.include_tasks: verify-dependencies.yaml

- name: Register DNS entry
  vars:
    domain_prefix: vault
  ansible.builtin.include_role:
    name: common/dns-register

- name: Create vault namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: vault

# Note: The following creation of certificate cannot be used with loop.
- ansible.builtin.include_tasks: ./tasks/task-create-certificate.yaml
  vars:
    name: vault-cluster
    certificate_template: "{{ CLUSTER_CERTIFICATE_TEMPLATE }}"

- ansible.builtin.include_tasks: ./tasks/task-create-certificate.yaml
  vars:
    name: vault-ingress
    certificate_template: "{{ INGRESS_CERTIFICATE_TEMPLATE }}"

# Notes: Uses own domain name.
- name: Setup ingress
  ansible.builtin.include_tasks: "{{ INGRESS_SETUP }}"
  vars:
    name: vault
    namespace: vault
    in_definition: "{{ INGRESS_TEMPLATE }}"
    in_create: no

- name: Add hashicorp chart repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: "https://helm.releases.hashicorp.com"

- name: Deploy vault
  vars:
    version: "{% if vault.version is defined and vault.version and vault.version != 'latest' %}{{ vault.version }}{% endif %}"
  kubernetes.core.helm:
    name: vault
    atomic: yes
    chart_ref: hashicorp/vault
    chart_version: "{{ version }}"
    namespace: vault
    create_namespace: yes
    values: "{{ VALUES_FILE }}"
    wait: yes

- name: Waiting for vault deployments to be ready
  ansible.builtin.shell: |
    for d in $(kubectl -n vault get deployment -o json | jq -r .items[].metadata.name); do kubectl rollout status -n vault deployment/$d; done;
    kubectl wait --for=jsonpath='{.status.conditions[?(@.type=="PodReadyToStartContainers")].status}'="True" pod vault-0 -n vault
    kubectl wait --for=jsonpath='{.status.phase}'=Running pod vault-0 -n vault
    sleep 30

- name: "Configure {{ unseal_action }} unseal"
  vars:
    unseal_action: "{{ (vault.unseal.type != 'manual') | ternary('auto', vault.unseal.type) }}"
  ansible.builtin.include_tasks: "{{ unseal_action }}-unseal.yaml"

- name: Vault login
  vars:
    token: "{{ key_result.stdout | regex_search('Initial Root Token: (.+)', '\\1') | first }}"
  shell: kubectl exec -n vault vault-0 -- vault login -address="https://vault-0.vault-internal:8200" -ca-cert="/vault/userconfig/vault-cluster-tls/ca.crt" {{ token }}
  register: key_result

- name: Enable kubernetes auth
  vars:
    token: "{{ key_result.stdout | regex_search('Initial Root Token: (.+)', '\\1') | first }}"
  shell: |
    kubectl exec -it -n vault vault-0 -- vault auth enable -address="https://vault-0.vault-internal:8200" -ca-cert="/vault/userconfig/vault-cluster-tls/ca.crt" kubernetes
    kubernetes_address=$(kubectl exec -it -n vault vault-0 -- printenv KUBERNETES_PORT_443_TCP_ADDR | tr -d '\r')
    kubectl exec -it -n vault vault-0 -- vault write -address="https://vault-0.vault-internal:8200" -ca-cert="/vault/userconfig/vault-cluster-tls/ca.crt" auth/kubernetes/config kubernetes_host="https://${kubernetes_address}:443"

- name: Deploy secrets operator
  ansible.builtin.include_role:
    name: vault/secrets-operator
  when: vault.enable_secrets_operator

- name: Deploy secrets store csi driver
  ansible.builtin.include_role:
    name: vault/secrets-store
  when: vault.enable_csi