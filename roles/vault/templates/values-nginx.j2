global:
  tlsDisable: false

injector:
  enabled: {{ vault.injector.enable }}
  extraEnvironmentVars:
    AGENT_INJECT_VAULT_ADDR: https://vault-active.vault.svc.cluster.local:8200
  logLevel: {{ vault.injector.log_level }}
{% if not kube.allow_scheduling %}
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
  nodeSelector:
    node-role.kubernetes.io/control-plane: ""
{% endif %}

server:
  logLevel: {{ vault.log_level }}
{% if not kube.allow_scheduling %}
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
  nodeSelector:
    node-role.kubernetes.io/control-plane: ""
{% endif %}
  auditStorage:
    enabled: true
  standalone:
    enabled: false
  extraEnvironmentVars:
    VAULT_ADDR: https://vault-active.vault.svc.cluster.local:8200
    VAULT_CACERT: /vault/tls/ca.crt
    VAULT_CLIENT_CERT: /vault/tls/tls.crt
    VAULT_CLIENT_KEY: /vault/tls/tls.key
  volumes:
    - name: cert-store
      secret:
        secretName: vault-cluster-tls
        items:
          - key: ca.crt
            path: vault-ca.crt
    - name: vault-cert
      secret:
        secretName: vault-cluster-tls
  volumeMounts:
    - name: cert-store
      mountPath: /etc/ssl/certs/vault-ca.crt
      subPath: vault-ca.crt
    - name: vault-cert
      mountPath: /vault/tls/
  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      setNodeId: true

      config: |
        ui = true
        cluster_name = "vault-integrated-storage"

        listener "tcp" {
          tls_disable = 0
          tls_require_and_verify_client_cert = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_cert_file = "/vault/tls/tls.crt"
          tls_key_file = "/vault/tls/tls.key"
        }

        storage "raft" {
          path = "/vault/data"

{% if vault.unseal.type != 'manual' %}
          retry_join {
            leader_api_addr = "https://vault-0.vault-internal:8200"
            leader_ca_cert_file = "/vault/tls/ca.crt"
            leader_client_cert_file = "/vault/tls/tls.crt"
            leader_client_key_file = "/vault/tls/tls.key"
          }
          retry_join {
            leader_api_addr = "https://vault-1.vault-internal:8200"
            leader_ca_cert_file = "/vault/tls/ca.crt"
            leader_client_cert_file = "/vault/tls/tls.crt"
            leader_client_key_file = "/vault/tls/tls.key"
          }
          retry_join {
            leader_api_addr = "https://vault-2.vault-internal:8200"
            leader_ca_cert_file = "/vault/tls/ca.crt"
            leader_client_cert_file = "/vault/tls/tls.crt"
            leader_client_key_file = "/vault/tls/tls.key"
          }
{% endif %}
        }

{% if vault.unseal.type == 'transit' %}
        seal "transit" {
          address = "{{ vault.unseal.transit.server_url }}"
          token   = "{{ vault.unseal.transit.token }}"
          disable_renewal = "false"
          key_name = "autounseal"
          mount_path = "transit/"
        }
{% elif vault.unseal.type == 'azure' %}
        seal "azurekeyvault" {
          tenant_id       = "{{ vault.unseal.azure.tenant_id }}"
          client_id       = "{{ vault.unseal.azure.client_id }}"
          client_secret   = "{{ vault.unseal.azure.client_secret }}"
          vault_name      = "{{ vault.unseal.azure.vault_name }}"
          key_name        = "{{ vault.unseal.azure.key_name }}"
          subscription_id = "{{ vault.unseal.azure.subscription_id }}"
        }
{% endif %}

        service_registration "kubernetes" {}
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    hosts:
      - host: vault.{{ kube.cluster.domain }}
    tls:
      - secretName: vault-ingress-tls
        hosts:
          - vault.{{ kube.cluster.domain }}

csi:
  enabled: {{ vault.csi.enable }}
  volumes:
    - name: tls
      secret:
        secretName: vault-cluster-tls

  volumeMounts:
    - name: tls
      mountPath: /vault/tls
      readOnly: true

  agent:
    logLevel: {{ vault.csi.agent.log_level }}

  debug: {{ vault.csi.debug }}
{% if not kube.allow_scheduling %}
  pod:
    tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
    nodeSelector:
      node-role.kubernetes.io/control-plane: ""
{% endif %}

serverTelemetry:
  serviceMonitor:
    enabled: true
    selectors:
      release: monitoring

ui:
  enabled: true