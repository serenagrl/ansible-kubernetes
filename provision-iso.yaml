# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: <<<<< Creates ubuntu autoinstall iso files >>>>>
  hosts: localhost
  become: yes
  vars:
    node: "{{ hostvars[item] }}"

  tasks:
    - name: Installing dependency packages (may take a while)
      apt:
        pkg:
          - libarchive-tools
          - xorriso
        state: latest
        update_cache: true

    - name: Create working directory
      file:
        path: "{{ _work_dir }}"
        state: directory

    - name: Download ubuntu iso
      get_url:
        url: "{{ _setup.ubuntu_iso_url }}"
        dest: "{{ _work_dir }}/ubuntu-base.iso"

    - name: Unpack iso
      vars:
        iso_folder: ./ubuntu-iso
      shell: |
              rm -Rf {{ iso_folder }}
              mkdir {{ iso_folder }}
              bsdtar -C {{ iso_folder }} -xf ./ubuntu-base.iso
              mkdir -p "{{ _vm.iso.ubuntu }}"
      args:
        chdir: "{{ _work_dir }}"
        creates: "{{ iso_folder }}"

    - name: Create iso source for each server
      vars:
        target_dir: "{{ _work_dir }}/{{ item }}-iso"
      shell: |
              rm -Rf {{ target_dir }}
              cp -r {{ _work_dir }}/ubuntu-iso {{ target_dir }}
      loop: "{{ groups['kubernetes_cluster'] }}"

    - name: Prepare metadata
      vars:
        target_dir: "{{ _work_dir }}/{{ item }}-iso/server"
      block:
        - name: Create server metadata directory
          file:
            path: "{{ target_dir }}"
            state: directory
          loop: "{{ groups['kubernetes_cluster'] }}"

        - name: Create meta-data file
          file:
            path: "{{ target_dir }}/meta-data"
            state: touch
          loop: "{{ groups['kubernetes_cluster'] }}"

    - name: Edit grub settings
      block:
        - name: Edit grub timeout
          replace:
            path: "{{ _work_dir }}/{{ item }}-iso/boot/grub/grub.cfg"
            regexp: 'set timeout=30'
            replace: 'set timeout=1'
          loop: "{{ groups['kubernetes_cluster'] }}"

        - name: Insert new menu entry to grub
          blockinfile:
            path: "{{ _work_dir }}/{{ item }}-iso/boot/grub/grub.cfg"
            insertafter: "/menu_color_highlight"
            marker: ""
            block: |
                    menuentry "autoinstall" {
                            set gfxpayload=keep
                            linux   /casper/vmlinuz quiet autoinstall ds=nocloud\;s=/cdrom/server/ ---
                            initrd  /casper/initrd
                    }
          loop: "{{ groups['kubernetes_cluster'] }}"

    - name: Generate ssh keys for Ansible host (if required)
      shell: |
              ssh-keygen -t rsa -q -f "/root/.ssh/id_rsa" -N ""
      args:
        creates: /root/.ssh/id_rsa

    - name: Create user-data
      vars:
        id_rsa_pub: "{{ lookup('file','/root/.ssh/id_rsa.pub') }}"
      blockinfile:
        path: "{{ _work_dir }}/{{ item }}-iso/server/user-data"
        create: yes
        marker: ""
        block: |
                #cloud-config
                autoinstall:
                  version: 1
                  locale: en_US
                  network:
                    network:
                      version: 2
                      ethernets:
                        eth0:
                          dhcp4: false
                          addresses:
                            - {{ node.ansible_host }}/{{ _setup.network.cidr }}
                          nameservers:
                            addresses: [{{ _setup.network.dns }}]
                          routes:
                            - to: default
                              via: {{ _setup.network.gateway }}
                  identity:
                    hostname: {{ item }}
                    username: {{ _kube.user }}
                    password: {{ _kube.pwd }}
                  ssh:
                    install-server: yes
                    allow-pw: yes
                  user-data:
                    runcmd:
                      - sed -i '/#PermitRootLogin/a\\PermitRootLogin yes' /etc/ssh/sshd_config
                      - systemctl restart ssh
                      - usermod --password '{{ _setup.root_pwd }}' root
                  late-commands:
                    - mkdir /target/root/.ssh
                    - echo '{{ id_rsa_pub }}' >> /target/root/.ssh/authorized_keys

      loop: "{{ groups['kubernetes_cluster'] }}"

    - name: Ccreate installation .iso file
      vars:
        xorriso_command: "{{ _work_dir }}/xorriso-command-{{ item }}"
      block:
        - name: Prepare xorriso command file
          shell: |
                  xorriso -indev "{{ _work_dir }}/ubuntu-base.iso" -report_el_torito as_mkisofs >| {{ xorriso_command }}
                  sed -i "/-V/c\-V '{{ item }} Ubuntu autoinstall'" {{ xorriso_command }}
                  echo -o '"{{ _vm.iso.ubuntu }}/{{ item }}-ubuntu.iso"' >> {{ xorriso_command }}
                  sed -i '1i -as mkisofs' {{ xorriso_command }}
                  sed -i 's/$/ \\/g' {{ xorriso_command }}
                  echo '{{ _work_dir }}/{{ item }}-iso/' >> {{ xorriso_command }}
          loop: "{{ groups['kubernetes_cluster'] }}"

        - name: Create .iso file
          shell: |
                  xorriso -options_from_file {{ xorriso_command }}
          loop: "{{ groups['kubernetes_cluster'] }}"

        - name: Cleanup xorriso command files
          file:
            path: "{{ xorriso_command }}"
            state: absent
          loop: "{{ groups['kubernetes_cluster'] }}"
          when: _setup.cleanup

    - name: Cleanup iso source directories
      vars:
        target_dir: "{{ _work_dir }}/{{ item }}-iso"
      file:
        path: "{{ target_dir }}"
        state: absent
      loop: "{{ groups['kubernetes_cluster'] }}"
      when: _setup.cleanup
