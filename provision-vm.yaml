# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: <<<<< Creates Ubuntu Hyper-V Virtual Machines >>>>>
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Installing iso and image tools
      apt:
        pkg:
          - qemu-utils
          - genisoimage
        state: latest
        update_cache: true

    - name: Create working directory
      file:
        path: "{{ _work_dir }}"
        state: directory        

    - name: Downloading ubuntu cloud image 
      get_url:
        url: "{{ _vm.ubuntu_img_url }}"
        dest: "{{ _work_dir }}/ubuntu-cloud.img"     

    - name: Generate ssh keys for Ansible host (if required)
      shell: ssh-keygen -t rsa -q -f "/root/.ssh/id_rsa" -N ""
      args:
        creates: /root/.ssh/id_rsa

- hosts: kubernetes_cluster
  gather_facts: no

  tasks:
    - name: Prepare configuration metadata and seed iso
      vars:
        metadata_dir: "{{ _work_dir }}/{{ inventory_hostname }}-metadata"
      block:
        - name: Remove previous metadata directory (if any)
          file:
            path: "{{ metadata_dir }}"
            state: absent

        - name: Create meta-data file
          blockinfile:
            path: "{{ metadata_dir }}/meta-data"
            create: yes
            block: |
              instance-id: "{{ inventory_hostname }}-id"
              local-hostname: "{{ inventory_hostname }}"

        - name: Create user-data file
          vars:
            id_rsa_pub: "{{ lookup('file','/root/.ssh/id_rsa.pub') }}"
          blockinfile:
            path: "{{ metadata_dir }}/user-data"
            create: yes
            marker: ''
            block: |
                    #cloud-config
                    passwd: '{{ _vm.root_pwd }}'
                    chpasswd: { expire: False }
                    ssh_pwauth: True
                    
                    users:
                      - default
                      - name: {{ _kube.user }}
                        gecos: K8s Admin
                        groups: users, admin
                        sudo: ALL=(ALL) NOPASSWD:ALL
                        shell: /bin/bash
                        passwd: '{{ _kube.pwd }}'
                        lock_passwd: false

                    write_files:
                      - path: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
                        content: |
                          network: {config: disabled}
                      - path: /etc/netplan/99-custom.yaml      
                        content: |
                          network:
                            version: 2
                            ethernets:
                              eth0:
                                dhcp4: false
                                addresses: 
                                  - {{ ansible_host }}/{{ _vm.network.cidr }}
                                nameservers:
                                  addresses: [{{ _vm.network.dns }}]
                                routes:
                                  - to: default
                                    via: {{ _vm.network.gateway }}           

                    runcmd:
                      - sudo netplan apply   
                      - sed -i '/#PermitRootLogin/a\\PermitRootLogin yes' /etc/ssh/sshd_config
                      - systemctl restart ssh
                      - usermod --password '{{ _vm.root_pwd }}' root
                      - echo '{{ id_rsa_pub }}' > /root/.ssh/authorized_keys  
                      - sudo apt update && sudo apt full-upgrade -y
                      - sudo apt install ntp ntpdate
                      - reboot -f

        - name: Create Seed iso
          shell: |
                  mkdir -p "{{ _vm.iso.ubuntu }}"
                  genisoimage -output "{{ _vm.iso.ubuntu }}/{{ inventory_hostname }}-seed.iso" -volid cidata -joliet -rock {{ metadata_dir }}

        - name: Remove metadata directory 
          file:
            path: "{{ metadata_dir }}"
            state: absent
          when: _vm.cleanup

        - name: Create Virtual Hard Disks directory
          file:
            path: "{{ _vm.dir.ubuntu }}/{{ inventory_hostname }}/Virtual Hard Disks"
            state: directory    

        - name: Preparing vhdx files for the Virtual Machines
          vars:
            vhd_disk: "{{ _vm.dir.ubuntu }}/{{ inventory_hostname }}/Virtual Hard Disks/{{ inventory_hostname }}.vhdx"
          shell: |
                  qemu-img convert -f qcow2 ubuntu-cloud.img -O vhdx -o subformat=dynamic "{{ vhd_disk }}"
          args:
            chdir: "{{ _work_dir }}"

      delegate_to: localhost

    - name: Create and Launch Virtual Machines
      block:
        - name: Provisioning Hyper-V Virtual Machines
          vars:
            vhd_disk: "{{ _vm.dir.windows }}\\{{ inventory_hostname }}\\Virtual Hard Disks\\{{ inventory_hostname }}.vhdx"
          ansible.windows.win_powershell:
            script: |
              Resize-VHD -Path "{{ vhd_disk }}" -SizeBytes {{ _vm.specs.disk_size }}
              New-VM -Name {{ inventory_hostname }} -Generation 2 -MemoryStartupBytes {{ _vm.specs.ram_size }} -Path "{{ _vm.dir.windows }}" -VHDPath "{{ vhd_disk }}" -SwitchName "{{ _vm.switch }}" 
              Add-VMDvdDrive {{ inventory_hostname }} -Path "{{ _vm.iso.windows }}\\{{ inventory_hostname }}-seed.iso"
              Set-VMProcessor {{ inventory_hostname }} -Count {{ _vm.specs.v_cpu }}
              Set-VMFirmware -VMName {{ inventory_hostname }} -EnableSecureBoot Off 
              Set-VMMemory {{ inventory_hostname }} -MinimumBytes {{ _vm.specs.min_ram_size }} -DynamicMemoryEnabled 1
              Start-VM {{ inventory_hostname }}

        - name: Waiting for ubuntu configuration to complete
          ansible.windows.win_powershell:
            script: |
              Wait-VM -Name {{ inventory_hostname }} -For Reboot

        - name: Unmount and remove seed.iso 
          ansible.windows.win_powershell:
            script: |
              Get-VMDvdDrive -VMName "{{ inventory_hostname }}" | Remove-VMDvdDrive
              rm {{ inventory_hostname }}-seed.iso

            chdir: "{{ _vm.iso.windows }}"
          when: _vm.cleanup

      delegate_to: winrm_host      