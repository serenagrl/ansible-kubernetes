# Author: Serena Yeoh
#
# Disclaimer:
# This playbook was written based on my self-learning and may not follow certain
# best practices or work properly in your environment. Use it at your own risk.
#
- name: <<<<< Registers the created kubernetes environment to AWX >>>>>
  hosts: localhost
  
  vars:
    names:
      cp: "{{ groups['kubernetes_control_planes'].0 }}"
      inventory: "{{ _awx.setup.name }} Inventory"
      project: "{{ _awx.setup.name }} Project"
      job_template: "{{ _awx.setup.name }} Job Template"
      host_credential: "{{ _awx.setup.name }} {{ groups['kubernetes_control_planes'].0 }} Host Credential"
      scm_credential: "{{ _awx.setup.name }} Source Control Credential"
      api_credential: "{{ _awx.setup.name }} Gitlab API Access Token"
    awx_username: admin
    awx_password: "{{ lookup('file', _work_dir + '/awx_password') }}"
    awx_host: "http://{{ hostvars[names.cp].ansible_host }}:30080"

  tasks:
    - name: Installing ansible tower cli
      pip:
        name: https://releases.ansible.com/ansible-tower/cli/ansible-tower-cli-latest.tar.gz

    - name: Checking/waiting for awx host 
      uri:
        url: "{{ awx_host }}"
      register: result
      until: result.status == 200
      retries: 15
      delay: 30

    - name: Get authentication token
      awx.awx.token:
        controller_host: "{{ awx_host }}"
        description: 'Login token'
        scope: "write"
        state: present
        controller_username: "{{ awx_username }}"
        controller_password: "{{ awx_password }}"

    - name: Setup environment in AWX for basic kubernetes application deployment
      block:
        - name: Creating organization '{{ _awx.setup.organization.name }}'
          awx.awx.organization:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ _awx.setup.organization.name }}"
            description: "{{ _awx.setup.organization.desc }}"
            state: present

        - name: Creating inventory '{{ names.inventory }}'
          awx.awx.inventory:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.inventory }}"
            description: "Collection of hosts for {{ _awx.setup.name }}"
            organization: "{{ _awx.setup.organization.name }}"
            variables: "{{ _awx.setup.inventory_vars if _awx.setup.inventory_vars else {} }}"
            state: present

        - name: Creating host '{{ names.cp }}'
          awx.awx.host:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.cp }}"
            description: "{{ _awx.setup.name }} Kubernetes Control Plane."
            inventory: "{{ names.inventory }}"
            variables:
              ansible_host: "{{ hostvars[names.cp].ansible_host }}"
              ansible_user: "{{ hostvars[names.cp].ansible_user }}"
            state: present

        - name: Creating host for kubernetes nodes
          awx.awx.host:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ item }}"
            description: "{{ _awx.setup.name }} Kubernetes node."
            inventory: "{{ names.inventory }}"
            variables:
              ansible_host: "{{ hostvars[item].ansible_host }}"
              ansible_user: "{{ hostvars[item].ansible_user }}"
            state: present
          loop: "{{ groups['kubernetes_nodes'] }}"

        - name: Creating group 'kubernetes_control_planes'
          awx.awx.group:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "kubernetes_control_planes"
            description: "{{ _awx.setup.name }} Kubernetes control plane group."
            inventory: "{{ names.inventory }}"
            hosts:
              - "{{ names.cp }}"
            state: present

        - name: Creating group 'kubernetes_nodes'
          awx.awx.group:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "kubernetes_nodes"
            description: "{{ _awx.setup.name }} Kubernetes kubernetes_nodes group."
            inventory: "{{ names.inventory }}"
            hosts: "{{ groups['kubernetes_nodes'] }}"
            state: present

        - name: Creating group 'kubernetes_cluster'
          awx.awx.group:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "kubernetes_cluster"
            description: "{{ _awx.setup.name }} Kubernetes cluster main group."
            inventory: "{{ names.inventory }}"
            children:
              - "kubernetes_control_planes"
              - "kubernetes_nodes"
            state: present

        - name: Creating source control credential
          awx.awx.credential:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.scm_credential }}"
            description: "Source control credential for {{ names.project }}"
            organization: "{{ _awx.setup.organization.name }}"
            credential_type: Source Control
            inputs:
              username: "{{ _awx.setup.gitlab.user  }}"
              password: "{{ _awx.setup.gitlab.token }}"
            state: present

        - name: Creating project '{{ names.project }}'
          awx.awx.project:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.project }}"
            description: "Collection of playbooks for {{ _awx.setup.name }}"
            organization: "{{ _awx.setup.organization.name }}"
            scm_type: git
            scm_url: "{{ _awx.setup.gitlab.url }}"
            scm_update_on_launch: yes
            scm_delete_on_update: yes
            credential: "{{ names.scm_credential }}"
            state: present
          ignore_errors: yes

        - name: Creating machine credential
          awx.awx.credential:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.host_credential }}"
            description: "Credentials for {{ names.cp }}"
            organization: "{{ _awx.setup.organization.name }}"
            credential_type: Machine
            inputs:
              ssh_key_data: "{{ lookup('file', '/root/.ssh/id_rsa') }}"
            state: present

        - name: Creating new credential type
          awx.awx.credential_type:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "Gitlab API Access Token (Custom)"
            description: "Used for accessing Gitlab API."
            kind: cloud
            inputs:
              fields:
                - id: gitlab_api_token
                  type: string
                  label: Gitlab API Access Token
                  secret: true
            injectors:
              extra_vars:
                gitlab_pat: "{%raw%}{{ gitlab_api_token }}{%endraw%}"
            state: present

        - name: Creating gitlab credential
          awx.awx.credential:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.api_credential }}"
            description: "Credentials used for assessing Gitlab API"
            organization: "{{ _awx.setup.organization.name }}"
            credential_type: "Gitlab API Access Token (Custom)"
            inputs:
              gitlab_api_token: "{{ _awx.setup.gitlab.api_token }}"
            state: present

        - name: Creating job template '{{ names.job_template }}'
          awx.awx.job_template:
            controller_host: "{{ awx_host }}"
            controller_oauthtoken: "{{ controller_token }}"
            name: "{{ names.job_template }}"
            description: "Deploys applications to the kubernetes cluster"
            organization: "{{ _awx.setup.organization.name }}"
            inventory: "{{ names.inventory }}"
            project: "{{ names.project }}"
            job_type: "run"
            playbook: "{{ _awx.setup.playbook }}"
            extra_vars: "{{ _awx.setup.job_template_vars if _awx.setup.job_template_vars else {} }}"
            credentials:
              - "{{ names.host_credential }}"
              - "{{ names.api_credential }}"
            state: present
          ignore_errors: yes

      rescue:
        - name: Delete authentication token
          awx.awx.token:
            controller_host: "{{ awx_host }}"
            existing_token: "{{ controller_token }}"
            state: absent
            controller_oauthtoken: "{{ controller_token }}"

